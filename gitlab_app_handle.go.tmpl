// Code generated by codegen. DO NOT EDIT.

package probot

import (
	"context"
	"fmt"
	"net/http"

	"github.com/xanzy/go-gitlab"
)

func (app *gitlabApp) handelEvent(
	ctx context.Context,
	w http.ResponseWriter, r *http.Request,
	eventType string, payload interface{},
) (handlerKey string) {
	switch typed := payload.(type) {
    {{ range $event := .Events }}{{if $event.Event }}case *gitlab.{{$event.Event}}:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.{{$event.Event}}) string {
				{{if $event.Action}}return "{{$event.RawType}}.{{$event.Action}}"
				{{else}}return "{{$event.RawType}}"{{end}}
			},
			func(p *gitlab.{{$event.Event}}) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.{{$event.Event}}) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	{{else}}case *gitlab.{{$event.Type}}Event:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.{{$event.Type}}Event) string {
				{{if $event.Action}}return "{{$event.RawType}}.{{$event.Action}}"
				{{else}}return "{{$event.RawType}}"{{end}}
			},
			func(p *gitlab.{{$event.Type}}Event) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.{{$event.Type}}Event) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	{{ end }}{{ end }}
	default:
		app.handleError(w, fmt.Errorf("event %s not found", eventType), http.StatusNotFound)
	}
	return
}
