// Code generated by codegen. DO NOT EDIT.

package probot

import "github.com/google/go-github/v48/github"

// githubEvent contains all event and handler types
type githubEvent struct {
	// BranchProtectionRule is webhook event `branch_protection_rule`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#branch_protection_rule
	BranchProtectionRule githubEventBranchProtectionRuleAllInOne
	// CheckRun is webhook event `check_run`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#check_run
	CheckRun githubEventCheckRunAllInOne
	// CheckSuite is webhook event `check_suite`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#check_suite
	CheckSuite githubEventCheckSuiteAllInOne
	// CodeScanningAlert is webhook event `code_scanning_alert`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#code_scanning_alert
	CodeScanningAlert githubEventCodeScanningAlertAllInOne
	// CommitComment is webhook event `commit_comment`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#commit_comment
	CommitComment githubEventCommitCommentAllInOne
	// Create is webhook event `create`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#create
	Create githubEventCreateAllInOne
	// Delete is webhook event `delete`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#delete
	Delete githubEventDeleteAllInOne
	// DeployKey is webhook event `deploy_key`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#deploy_key
	DeployKey githubEventDeployKeyAllInOne
	// DeploymentStatus is webhook event `deployment_status`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#deployment_status
	DeploymentStatus githubEventDeploymentStatusAllInOne
	// Deployment is webhook event `deployment`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#deployment
	Deployment githubEventDeploymentAllInOne
	// Discussion is webhook event `discussion`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#discussion
	Discussion githubEventDiscussionAllInOne
	// Fork is webhook event `fork`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#fork
	Fork githubEventForkAllInOne
	// GitHubAppAuthorization is webhook event `git_hub_app_authorization`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#git_hub_app_authorization
	GitHubAppAuthorization githubEventGitHubAppAuthorizationAllInOne
	// Gollum is webhook event `gollum`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#gollum
	Gollum githubEventGollumAllInOne
	// InstallationRepositories is webhook event `installation_repositories`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation_repositories
	InstallationRepositories githubEventInstallationRepositoriesAllInOne
	// Installation is webhook event `installation`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#installation
	Installation githubEventInstallationAllInOne
	// IssueComment is webhook event `issue_comment`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issue_comment
	IssueComment githubEventIssueCommentAllInOne
	// Issues is webhook event `issues`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issues
	Issues githubEventIssuesAllInOne
	// Label is webhook event `label`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#label
	Label githubEventLabelAllInOne
	// MarketplacePurchase is webhook event `marketplace_purchase`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#marketplace_purchase
	MarketplacePurchase githubEventMarketplacePurchaseAllInOne
	// Member is webhook event `member`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#member
	Member githubEventMemberAllInOne
	// Membership is webhook event `membership`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#membership
	Membership githubEventMembershipAllInOne
	// MergeGroup is webhook event `merge_group`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#merge_group
	MergeGroup githubEventMergeGroupAllInOne
	// Meta is webhook event `meta`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#meta
	Meta githubEventMetaAllInOne
	// PullRequestReviewComment is webhook event `pull_request_review_comment`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request_review_comment
	PullRequestReviewComment githubEventPullRequestReviewCommentAllInOne
	// PullRequestReviewThread is webhook event `pull_request_review_thread`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request_review_thread
	PullRequestReviewThread githubEventPullRequestReviewThreadAllInOne
	// PullRequestReview is webhook event `pull_request_review`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request_review
	PullRequestReview githubEventPullRequestReviewAllInOne
	// PullRequest is webhook event `pull_request`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
	PullRequest githubEventPullRequestAllInOne
	// Push is webhook event `push`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
	Push githubEventPushAllInOne
	// Status is webhook event `status`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#status
	Status githubEventStatusAllInOne
	// WorkflowDispatch is webhook event `workflow_dispatch`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_dispatch
	WorkflowDispatch githubEventWorkflowDispatchAllInOne
	// WorkflowJob is webhook event `workflow_job`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_job
	WorkflowJob githubEventWorkflowJobAllInOne
	// WorkflowRun is webhook event `workflow_run`.
	// reference: https://docs.github.com/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_run
	WorkflowRun githubEventWorkflowRunAllInOne
}

// githubEventBranchProtectionRuleAllInOne contains event and handler for type BranchProtectionRule
type githubEventBranchProtectionRuleAllInOne struct {
	githubEventBranchProtectionRule

	// Deleted is `branch_protection_rule` event with `deleted` action.
	Deleted githubEventBranchProtectionRuleDeleted
	// Created is `branch_protection_rule` event with `created` action.
	Created githubEventBranchProtectionRuleCreated
	// Edited is `branch_protection_rule` event with `edited` action.
	Edited githubEventBranchProtectionRuleEdited
}

// BranchProtectionRuleContext is the context type for BranchProtectionRule event handler to process
type BranchProtectionRuleContext = ProbotContext[GithubClient, github.BranchProtectionRuleEvent]

// Handler returns event handler function to process context
func (githubEventBranchProtectionRuleAllInOne) Handler(fn func(ctx BranchProtectionRuleContext)) Handler {
	return EventHandlerFunc[GithubClient, github.BranchProtectionRuleEvent](fn)
}

// githubEventBranchProtectionRule is the base event type of BranchProtectionRule
type githubEventBranchProtectionRule struct{}

// Type implement the WebhookEvent interface
func (githubEventBranchProtectionRule) Type() string { return "branch_protection_rule" }

// Action implement the WebhookEvent interface
func (githubEventBranchProtectionRule) Action() string { return "" }

// githubEventBranchProtectionRuleDeleted is the Deleted action of BranchProtectionRule event
type githubEventBranchProtectionRuleDeleted struct {
	githubEventBranchProtectionRule
}

// Action implement the WebhookEvent interface
func (githubEventBranchProtectionRuleDeleted) Action() string { return "deleted" }

// githubEventBranchProtectionRuleCreated is the Created action of BranchProtectionRule event
type githubEventBranchProtectionRuleCreated struct {
	githubEventBranchProtectionRule
}

// Action implement the WebhookEvent interface
func (githubEventBranchProtectionRuleCreated) Action() string { return "created" }

// githubEventBranchProtectionRuleEdited is the Edited action of BranchProtectionRule event
type githubEventBranchProtectionRuleEdited struct {
	githubEventBranchProtectionRule
}

// Action implement the WebhookEvent interface
func (githubEventBranchProtectionRuleEdited) Action() string { return "edited" }

// githubEventCheckRunAllInOne contains event and handler for type CheckRun
type githubEventCheckRunAllInOne struct {
	githubEventCheckRun

	// Completed is `check_run` event with `completed` action.
	Completed githubEventCheckRunCompleted
	// Created is `check_run` event with `created` action.
	Created githubEventCheckRunCreated
	// RequestedAction is `check_run` event with `requested_action` action.
	RequestedAction githubEventCheckRunRequestedAction
	// Rerequested is `check_run` event with `rerequested` action.
	Rerequested githubEventCheckRunRerequested
}

// CheckRunContext is the context type for CheckRun event handler to process
type CheckRunContext = ProbotContext[GithubClient, github.CheckRunEvent]

// Handler returns event handler function to process context
func (githubEventCheckRunAllInOne) Handler(fn func(ctx CheckRunContext)) Handler {
	return EventHandlerFunc[GithubClient, github.CheckRunEvent](fn)
}

// githubEventCheckRun is the base event type of CheckRun
type githubEventCheckRun struct{}

// Type implement the WebhookEvent interface
func (githubEventCheckRun) Type() string { return "check_run" }

// Action implement the WebhookEvent interface
func (githubEventCheckRun) Action() string { return "" }

// githubEventCheckRunCompleted is the Completed action of CheckRun event
type githubEventCheckRunCompleted struct {
	githubEventCheckRun
}

// Action implement the WebhookEvent interface
func (githubEventCheckRunCompleted) Action() string { return "completed" }

// githubEventCheckRunCreated is the Created action of CheckRun event
type githubEventCheckRunCreated struct {
	githubEventCheckRun
}

// Action implement the WebhookEvent interface
func (githubEventCheckRunCreated) Action() string { return "created" }

// githubEventCheckRunRequestedAction is the RequestedAction action of CheckRun event
type githubEventCheckRunRequestedAction struct {
	githubEventCheckRun
}

// Action implement the WebhookEvent interface
func (githubEventCheckRunRequestedAction) Action() string { return "requested_action" }

// githubEventCheckRunRerequested is the Rerequested action of CheckRun event
type githubEventCheckRunRerequested struct {
	githubEventCheckRun
}

// Action implement the WebhookEvent interface
func (githubEventCheckRunRerequested) Action() string { return "rerequested" }

// githubEventCheckSuiteAllInOne contains event and handler for type CheckSuite
type githubEventCheckSuiteAllInOne struct {
	githubEventCheckSuite

	// Completed is `check_suite` event with `completed` action.
	Completed githubEventCheckSuiteCompleted
	// Requested is `check_suite` event with `requested` action.
	Requested githubEventCheckSuiteRequested
	// Rerequested is `check_suite` event with `rerequested` action.
	Rerequested githubEventCheckSuiteRerequested
}

// CheckSuiteContext is the context type for CheckSuite event handler to process
type CheckSuiteContext = ProbotContext[GithubClient, github.CheckSuiteEvent]

// Handler returns event handler function to process context
func (githubEventCheckSuiteAllInOne) Handler(fn func(ctx CheckSuiteContext)) Handler {
	return EventHandlerFunc[GithubClient, github.CheckSuiteEvent](fn)
}

// githubEventCheckSuite is the base event type of CheckSuite
type githubEventCheckSuite struct{}

// Type implement the WebhookEvent interface
func (githubEventCheckSuite) Type() string { return "check_suite" }

// Action implement the WebhookEvent interface
func (githubEventCheckSuite) Action() string { return "" }

// githubEventCheckSuiteCompleted is the Completed action of CheckSuite event
type githubEventCheckSuiteCompleted struct {
	githubEventCheckSuite
}

// Action implement the WebhookEvent interface
func (githubEventCheckSuiteCompleted) Action() string { return "completed" }

// githubEventCheckSuiteRequested is the Requested action of CheckSuite event
type githubEventCheckSuiteRequested struct {
	githubEventCheckSuite
}

// Action implement the WebhookEvent interface
func (githubEventCheckSuiteRequested) Action() string { return "requested" }

// githubEventCheckSuiteRerequested is the Rerequested action of CheckSuite event
type githubEventCheckSuiteRerequested struct {
	githubEventCheckSuite
}

// Action implement the WebhookEvent interface
func (githubEventCheckSuiteRerequested) Action() string { return "rerequested" }

// githubEventCodeScanningAlertAllInOne contains event and handler for type CodeScanningAlert
type githubEventCodeScanningAlertAllInOne struct {
	githubEventCodeScanningAlert

	// AppearedInBranch is `code_scanning_alert` event with `appeared_in_branch` action.
	AppearedInBranch githubEventCodeScanningAlertAppearedInBranch
	// ClosedByUser is `code_scanning_alert` event with `closed_by_user` action.
	ClosedByUser githubEventCodeScanningAlertClosedByUser
	// Created is `code_scanning_alert` event with `created` action.
	Created githubEventCodeScanningAlertCreated
	// Fixed is `code_scanning_alert` event with `fixed` action.
	Fixed githubEventCodeScanningAlertFixed
	// Reopened is `code_scanning_alert` event with `reopened` action.
	Reopened githubEventCodeScanningAlertReopened
	// ReopenedByUser is `code_scanning_alert` event with `reopened_by_user` action.
	ReopenedByUser githubEventCodeScanningAlertReopenedByUser
}

// CodeScanningAlertContext is the context type for CodeScanningAlert event handler to process
type CodeScanningAlertContext = ProbotContext[GithubClient, github.CodeScanningAlertEvent]

// Handler returns event handler function to process context
func (githubEventCodeScanningAlertAllInOne) Handler(fn func(ctx CodeScanningAlertContext)) Handler {
	return EventHandlerFunc[GithubClient, github.CodeScanningAlertEvent](fn)
}

// githubEventCodeScanningAlert is the base event type of CodeScanningAlert
type githubEventCodeScanningAlert struct{}

// Type implement the WebhookEvent interface
func (githubEventCodeScanningAlert) Type() string { return "code_scanning_alert" }

// Action implement the WebhookEvent interface
func (githubEventCodeScanningAlert) Action() string { return "" }

// githubEventCodeScanningAlertAppearedInBranch is the AppearedInBranch action of CodeScanningAlert event
type githubEventCodeScanningAlertAppearedInBranch struct {
	githubEventCodeScanningAlert
}

// Action implement the WebhookEvent interface
func (githubEventCodeScanningAlertAppearedInBranch) Action() string { return "appeared_in_branch" }

// githubEventCodeScanningAlertClosedByUser is the ClosedByUser action of CodeScanningAlert event
type githubEventCodeScanningAlertClosedByUser struct {
	githubEventCodeScanningAlert
}

// Action implement the WebhookEvent interface
func (githubEventCodeScanningAlertClosedByUser) Action() string { return "closed_by_user" }

// githubEventCodeScanningAlertCreated is the Created action of CodeScanningAlert event
type githubEventCodeScanningAlertCreated struct {
	githubEventCodeScanningAlert
}

// Action implement the WebhookEvent interface
func (githubEventCodeScanningAlertCreated) Action() string { return "created" }

// githubEventCodeScanningAlertFixed is the Fixed action of CodeScanningAlert event
type githubEventCodeScanningAlertFixed struct {
	githubEventCodeScanningAlert
}

// Action implement the WebhookEvent interface
func (githubEventCodeScanningAlertFixed) Action() string { return "fixed" }

// githubEventCodeScanningAlertReopened is the Reopened action of CodeScanningAlert event
type githubEventCodeScanningAlertReopened struct {
	githubEventCodeScanningAlert
}

// Action implement the WebhookEvent interface
func (githubEventCodeScanningAlertReopened) Action() string { return "reopened" }

// githubEventCodeScanningAlertReopenedByUser is the ReopenedByUser action of CodeScanningAlert event
type githubEventCodeScanningAlertReopenedByUser struct {
	githubEventCodeScanningAlert
}

// Action implement the WebhookEvent interface
func (githubEventCodeScanningAlertReopenedByUser) Action() string { return "reopened_by_user" }

// githubEventCommitCommentAllInOne contains event and handler for type CommitComment
type githubEventCommitCommentAllInOne struct {
	githubEventCommitComment

	// Created is `commit_comment` event with `created` action.
	Created githubEventCommitCommentCreated
}

// CommitCommentContext is the context type for CommitComment event handler to process
type CommitCommentContext = ProbotContext[GithubClient, github.CommitCommentEvent]

// Handler returns event handler function to process context
func (githubEventCommitCommentAllInOne) Handler(fn func(ctx CommitCommentContext)) Handler {
	return EventHandlerFunc[GithubClient, github.CommitCommentEvent](fn)
}

// githubEventCommitComment is the base event type of CommitComment
type githubEventCommitComment struct{}

// Type implement the WebhookEvent interface
func (githubEventCommitComment) Type() string { return "commit_comment" }

// Action implement the WebhookEvent interface
func (githubEventCommitComment) Action() string { return "" }

// githubEventCommitCommentCreated is the Created action of CommitComment event
type githubEventCommitCommentCreated struct {
	githubEventCommitComment
}

// Action implement the WebhookEvent interface
func (githubEventCommitCommentCreated) Action() string { return "created" }

// githubEventCreateAllInOne contains event and handler for type Create
type githubEventCreateAllInOne struct {
	githubEventCreate
}

// CreateContext is the context type for Create event handler to process
type CreateContext = ProbotContext[GithubClient, github.CreateEvent]

// Handler returns event handler function to process context
func (githubEventCreateAllInOne) Handler(fn func(ctx CreateContext)) Handler {
	return EventHandlerFunc[GithubClient, github.CreateEvent](fn)
}

// githubEventCreate is the base event type of Create
type githubEventCreate struct{}

// Type implement the WebhookEvent interface
func (githubEventCreate) Type() string { return "create" }

// Action implement the WebhookEvent interface
func (githubEventCreate) Action() string { return "" }

// githubEventDeleteAllInOne contains event and handler for type Delete
type githubEventDeleteAllInOne struct {
	githubEventDelete
}

// DeleteContext is the context type for Delete event handler to process
type DeleteContext = ProbotContext[GithubClient, github.DeleteEvent]

// Handler returns event handler function to process context
func (githubEventDeleteAllInOne) Handler(fn func(ctx DeleteContext)) Handler {
	return EventHandlerFunc[GithubClient, github.DeleteEvent](fn)
}

// githubEventDelete is the base event type of Delete
type githubEventDelete struct{}

// Type implement the WebhookEvent interface
func (githubEventDelete) Type() string { return "delete" }

// Action implement the WebhookEvent interface
func (githubEventDelete) Action() string { return "" }

// githubEventDeployKeyAllInOne contains event and handler for type DeployKey
type githubEventDeployKeyAllInOne struct {
	githubEventDeployKey

	// Created is `deploy_key` event with `created` action.
	Created githubEventDeployKeyCreated
	// Deleted is `deploy_key` event with `deleted` action.
	Deleted githubEventDeployKeyDeleted
}

// DeployKeyContext is the context type for DeployKey event handler to process
type DeployKeyContext = ProbotContext[GithubClient, github.DeployKeyEvent]

// Handler returns event handler function to process context
func (githubEventDeployKeyAllInOne) Handler(fn func(ctx DeployKeyContext)) Handler {
	return EventHandlerFunc[GithubClient, github.DeployKeyEvent](fn)
}

// githubEventDeployKey is the base event type of DeployKey
type githubEventDeployKey struct{}

// Type implement the WebhookEvent interface
func (githubEventDeployKey) Type() string { return "deploy_key" }

// Action implement the WebhookEvent interface
func (githubEventDeployKey) Action() string { return "" }

// githubEventDeployKeyCreated is the Created action of DeployKey event
type githubEventDeployKeyCreated struct {
	githubEventDeployKey
}

// Action implement the WebhookEvent interface
func (githubEventDeployKeyCreated) Action() string { return "created" }

// githubEventDeployKeyDeleted is the Deleted action of DeployKey event
type githubEventDeployKeyDeleted struct {
	githubEventDeployKey
}

// Action implement the WebhookEvent interface
func (githubEventDeployKeyDeleted) Action() string { return "deleted" }

// githubEventDeploymentStatusAllInOne contains event and handler for type DeploymentStatus
type githubEventDeploymentStatusAllInOne struct {
	githubEventDeploymentStatus

	// Created is `deployment_status` event with `created` action.
	Created githubEventDeploymentStatusCreated
}

// DeploymentStatusContext is the context type for DeploymentStatus event handler to process
type DeploymentStatusContext = ProbotContext[GithubClient, github.DeploymentStatusEvent]

// Handler returns event handler function to process context
func (githubEventDeploymentStatusAllInOne) Handler(fn func(ctx DeploymentStatusContext)) Handler {
	return EventHandlerFunc[GithubClient, github.DeploymentStatusEvent](fn)
}

// githubEventDeploymentStatus is the base event type of DeploymentStatus
type githubEventDeploymentStatus struct{}

// Type implement the WebhookEvent interface
func (githubEventDeploymentStatus) Type() string { return "deployment_status" }

// Action implement the WebhookEvent interface
func (githubEventDeploymentStatus) Action() string { return "" }

// githubEventDeploymentStatusCreated is the Created action of DeploymentStatus event
type githubEventDeploymentStatusCreated struct {
	githubEventDeploymentStatus
}

// Action implement the WebhookEvent interface
func (githubEventDeploymentStatusCreated) Action() string { return "created" }

// githubEventDeploymentAllInOne contains event and handler for type Deployment
type githubEventDeploymentAllInOne struct {
	githubEventDeployment

	// Created is `deployment` event with `created` action.
	Created githubEventDeploymentCreated
}

// DeploymentContext is the context type for Deployment event handler to process
type DeploymentContext = ProbotContext[GithubClient, github.DeploymentEvent]

// Handler returns event handler function to process context
func (githubEventDeploymentAllInOne) Handler(fn func(ctx DeploymentContext)) Handler {
	return EventHandlerFunc[GithubClient, github.DeploymentEvent](fn)
}

// githubEventDeployment is the base event type of Deployment
type githubEventDeployment struct{}

// Type implement the WebhookEvent interface
func (githubEventDeployment) Type() string { return "deployment" }

// Action implement the WebhookEvent interface
func (githubEventDeployment) Action() string { return "" }

// githubEventDeploymentCreated is the Created action of Deployment event
type githubEventDeploymentCreated struct {
	githubEventDeployment
}

// Action implement the WebhookEvent interface
func (githubEventDeploymentCreated) Action() string { return "created" }

// githubEventDiscussionAllInOne contains event and handler for type Discussion
type githubEventDiscussionAllInOne struct {
	githubEventDiscussion

	// Answered is `discussion` event with `answered` action.
	Answered githubEventDiscussionAnswered
	// CategoryChanged is `discussion` event with `category_changed` action.
	CategoryChanged githubEventDiscussionCategoryChanged
	// Created is `discussion` event with `created` action.
	Created githubEventDiscussionCreated
	// Deleted is `discussion` event with `deleted` action.
	Deleted githubEventDiscussionDeleted
	// Edited is `discussion` event with `edited` action.
	Edited githubEventDiscussionEdited
	// Labeled is `discussion` event with `labeled` action.
	Labeled githubEventDiscussionLabeled
	// Locked is `discussion` event with `locked` action.
	Locked githubEventDiscussionLocked
	// Pinned is `discussion` event with `pinned` action.
	Pinned githubEventDiscussionPinned
	// Transferred is `discussion` event with `transferred` action.
	Transferred githubEventDiscussionTransferred
	// Unanswered is `discussion` event with `unanswered` action.
	Unanswered githubEventDiscussionUnanswered
	// Unlabeled is `discussion` event with `unlabeled` action.
	Unlabeled githubEventDiscussionUnlabeled
	// Unlocked is `discussion` event with `unlocked` action.
	Unlocked githubEventDiscussionUnlocked
	// Unpinned is `discussion` event with `unpinned` action.
	Unpinned githubEventDiscussionUnpinned
}

// DiscussionContext is the context type for Discussion event handler to process
type DiscussionContext = ProbotContext[GithubClient, github.DiscussionEvent]

// Handler returns event handler function to process context
func (githubEventDiscussionAllInOne) Handler(fn func(ctx DiscussionContext)) Handler {
	return EventHandlerFunc[GithubClient, github.DiscussionEvent](fn)
}

// githubEventDiscussion is the base event type of Discussion
type githubEventDiscussion struct{}

// Type implement the WebhookEvent interface
func (githubEventDiscussion) Type() string { return "discussion" }

// Action implement the WebhookEvent interface
func (githubEventDiscussion) Action() string { return "" }

// githubEventDiscussionAnswered is the Answered action of Discussion event
type githubEventDiscussionAnswered struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionAnswered) Action() string { return "answered" }

// githubEventDiscussionCategoryChanged is the CategoryChanged action of Discussion event
type githubEventDiscussionCategoryChanged struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionCategoryChanged) Action() string { return "category_changed" }

// githubEventDiscussionCreated is the Created action of Discussion event
type githubEventDiscussionCreated struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionCreated) Action() string { return "created" }

// githubEventDiscussionDeleted is the Deleted action of Discussion event
type githubEventDiscussionDeleted struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionDeleted) Action() string { return "deleted" }

// githubEventDiscussionEdited is the Edited action of Discussion event
type githubEventDiscussionEdited struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionEdited) Action() string { return "edited" }

// githubEventDiscussionLabeled is the Labeled action of Discussion event
type githubEventDiscussionLabeled struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionLabeled) Action() string { return "labeled" }

// githubEventDiscussionLocked is the Locked action of Discussion event
type githubEventDiscussionLocked struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionLocked) Action() string { return "locked" }

// githubEventDiscussionPinned is the Pinned action of Discussion event
type githubEventDiscussionPinned struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionPinned) Action() string { return "pinned" }

// githubEventDiscussionTransferred is the Transferred action of Discussion event
type githubEventDiscussionTransferred struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionTransferred) Action() string { return "transferred" }

// githubEventDiscussionUnanswered is the Unanswered action of Discussion event
type githubEventDiscussionUnanswered struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionUnanswered) Action() string { return "unanswered" }

// githubEventDiscussionUnlabeled is the Unlabeled action of Discussion event
type githubEventDiscussionUnlabeled struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionUnlabeled) Action() string { return "unlabeled" }

// githubEventDiscussionUnlocked is the Unlocked action of Discussion event
type githubEventDiscussionUnlocked struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionUnlocked) Action() string { return "unlocked" }

// githubEventDiscussionUnpinned is the Unpinned action of Discussion event
type githubEventDiscussionUnpinned struct {
	githubEventDiscussion
}

// Action implement the WebhookEvent interface
func (githubEventDiscussionUnpinned) Action() string { return "unpinned" }

// githubEventForkAllInOne contains event and handler for type Fork
type githubEventForkAllInOne struct {
	githubEventFork
}

// ForkContext is the context type for Fork event handler to process
type ForkContext = ProbotContext[GithubClient, github.ForkEvent]

// Handler returns event handler function to process context
func (githubEventForkAllInOne) Handler(fn func(ctx ForkContext)) Handler {
	return EventHandlerFunc[GithubClient, github.ForkEvent](fn)
}

// githubEventFork is the base event type of Fork
type githubEventFork struct{}

// Type implement the WebhookEvent interface
func (githubEventFork) Type() string { return "fork" }

// Action implement the WebhookEvent interface
func (githubEventFork) Action() string { return "" }

// githubEventGitHubAppAuthorizationAllInOne contains event and handler for type GitHubAppAuthorization
type githubEventGitHubAppAuthorizationAllInOne struct {
	githubEventGitHubAppAuthorization
}

// GitHubAppAuthorizationContext is the context type for GitHubAppAuthorization event handler to process
type GitHubAppAuthorizationContext = ProbotContext[GithubClient, github.GitHubAppAuthorizationEvent]

// Handler returns event handler function to process context
func (githubEventGitHubAppAuthorizationAllInOne) Handler(fn func(ctx GitHubAppAuthorizationContext)) Handler {
	return EventHandlerFunc[GithubClient, github.GitHubAppAuthorizationEvent](fn)
}

// githubEventGitHubAppAuthorization is the base event type of GitHubAppAuthorization
type githubEventGitHubAppAuthorization struct{}

// Type implement the WebhookEvent interface
func (githubEventGitHubAppAuthorization) Type() string { return "git_hub_app_authorization" }

// Action implement the WebhookEvent interface
func (githubEventGitHubAppAuthorization) Action() string { return "" }

// githubEventGollumAllInOne contains event and handler for type Gollum
type githubEventGollumAllInOne struct {
	githubEventGollum
}

// GollumContext is the context type for Gollum event handler to process
type GollumContext = ProbotContext[GithubClient, github.GollumEvent]

// Handler returns event handler function to process context
func (githubEventGollumAllInOne) Handler(fn func(ctx GollumContext)) Handler {
	return EventHandlerFunc[GithubClient, github.GollumEvent](fn)
}

// githubEventGollum is the base event type of Gollum
type githubEventGollum struct{}

// Type implement the WebhookEvent interface
func (githubEventGollum) Type() string { return "gollum" }

// Action implement the WebhookEvent interface
func (githubEventGollum) Action() string { return "" }

// githubEventInstallationRepositoriesAllInOne contains event and handler for type InstallationRepositories
type githubEventInstallationRepositoriesAllInOne struct {
	githubEventInstallationRepositories

	// Added is `installation_repositories` event with `added` action.
	Added githubEventInstallationRepositoriesAdded
	// Removed is `installation_repositories` event with `removed` action.
	Removed githubEventInstallationRepositoriesRemoved
}

// InstallationRepositoriesContext is the context type for InstallationRepositories event handler to process
type InstallationRepositoriesContext = ProbotContext[GithubClient, github.InstallationRepositoriesEvent]

// Handler returns event handler function to process context
func (githubEventInstallationRepositoriesAllInOne) Handler(fn func(ctx InstallationRepositoriesContext)) Handler {
	return EventHandlerFunc[GithubClient, github.InstallationRepositoriesEvent](fn)
}

// githubEventInstallationRepositories is the base event type of InstallationRepositories
type githubEventInstallationRepositories struct{}

// Type implement the WebhookEvent interface
func (githubEventInstallationRepositories) Type() string { return "installation_repositories" }

// Action implement the WebhookEvent interface
func (githubEventInstallationRepositories) Action() string { return "" }

// githubEventInstallationRepositoriesAdded is the Added action of InstallationRepositories event
type githubEventInstallationRepositoriesAdded struct {
	githubEventInstallationRepositories
}

// Action implement the WebhookEvent interface
func (githubEventInstallationRepositoriesAdded) Action() string { return "added" }

// githubEventInstallationRepositoriesRemoved is the Removed action of InstallationRepositories event
type githubEventInstallationRepositoriesRemoved struct {
	githubEventInstallationRepositories
}

// Action implement the WebhookEvent interface
func (githubEventInstallationRepositoriesRemoved) Action() string { return "removed" }

// githubEventInstallationAllInOne contains event and handler for type Installation
type githubEventInstallationAllInOne struct {
	githubEventInstallation

	// Created is `installation` event with `created` action.
	Created githubEventInstallationCreated
	// Deleted is `installation` event with `deleted` action.
	Deleted githubEventInstallationDeleted
	// NewPermissionsAccepted is `installation` event with `new_permissions_accepted` action.
	NewPermissionsAccepted githubEventInstallationNewPermissionsAccepted
	// Suspend is `installation` event with `suspend` action.
	Suspend githubEventInstallationSuspend
	// Unsuspend is `installation` event with `unsuspend` action.
	Unsuspend githubEventInstallationUnsuspend
}

// InstallationContext is the context type for Installation event handler to process
type InstallationContext = ProbotContext[GithubClient, github.InstallationEvent]

// Handler returns event handler function to process context
func (githubEventInstallationAllInOne) Handler(fn func(ctx InstallationContext)) Handler {
	return EventHandlerFunc[GithubClient, github.InstallationEvent](fn)
}

// githubEventInstallation is the base event type of Installation
type githubEventInstallation struct{}

// Type implement the WebhookEvent interface
func (githubEventInstallation) Type() string { return "installation" }

// Action implement the WebhookEvent interface
func (githubEventInstallation) Action() string { return "" }

// githubEventInstallationCreated is the Created action of Installation event
type githubEventInstallationCreated struct {
	githubEventInstallation
}

// Action implement the WebhookEvent interface
func (githubEventInstallationCreated) Action() string { return "created" }

// githubEventInstallationDeleted is the Deleted action of Installation event
type githubEventInstallationDeleted struct {
	githubEventInstallation
}

// Action implement the WebhookEvent interface
func (githubEventInstallationDeleted) Action() string { return "deleted" }

// githubEventInstallationNewPermissionsAccepted is the NewPermissionsAccepted action of Installation event
type githubEventInstallationNewPermissionsAccepted struct {
	githubEventInstallation
}

// Action implement the WebhookEvent interface
func (githubEventInstallationNewPermissionsAccepted) Action() string {
	return "new_permissions_accepted"
}

// githubEventInstallationSuspend is the Suspend action of Installation event
type githubEventInstallationSuspend struct {
	githubEventInstallation
}

// Action implement the WebhookEvent interface
func (githubEventInstallationSuspend) Action() string { return "suspend" }

// githubEventInstallationUnsuspend is the Unsuspend action of Installation event
type githubEventInstallationUnsuspend struct {
	githubEventInstallation
}

// Action implement the WebhookEvent interface
func (githubEventInstallationUnsuspend) Action() string { return "unsuspend" }

// githubEventIssueCommentAllInOne contains event and handler for type IssueComment
type githubEventIssueCommentAllInOne struct {
	githubEventIssueComment

	// Created is `issue_comment` event with `created` action.
	Created githubEventIssueCommentCreated
	// Deleted is `issue_comment` event with `deleted` action.
	Deleted githubEventIssueCommentDeleted
	// Edited is `issue_comment` event with `edited` action.
	Edited githubEventIssueCommentEdited
}

// IssueCommentContext is the context type for IssueComment event handler to process
type IssueCommentContext = ProbotContext[GithubClient, github.IssueCommentEvent]

// Handler returns event handler function to process context
func (githubEventIssueCommentAllInOne) Handler(fn func(ctx IssueCommentContext)) Handler {
	return EventHandlerFunc[GithubClient, github.IssueCommentEvent](fn)
}

// githubEventIssueComment is the base event type of IssueComment
type githubEventIssueComment struct{}

// Type implement the WebhookEvent interface
func (githubEventIssueComment) Type() string { return "issue_comment" }

// Action implement the WebhookEvent interface
func (githubEventIssueComment) Action() string { return "" }

// githubEventIssueCommentCreated is the Created action of IssueComment event
type githubEventIssueCommentCreated struct {
	githubEventIssueComment
}

// Action implement the WebhookEvent interface
func (githubEventIssueCommentCreated) Action() string { return "created" }

// githubEventIssueCommentDeleted is the Deleted action of IssueComment event
type githubEventIssueCommentDeleted struct {
	githubEventIssueComment
}

// Action implement the WebhookEvent interface
func (githubEventIssueCommentDeleted) Action() string { return "deleted" }

// githubEventIssueCommentEdited is the Edited action of IssueComment event
type githubEventIssueCommentEdited struct {
	githubEventIssueComment
}

// Action implement the WebhookEvent interface
func (githubEventIssueCommentEdited) Action() string { return "edited" }

// githubEventIssuesAllInOne contains event and handler for type Issues
type githubEventIssuesAllInOne struct {
	githubEventIssues

	// Assigned is `issues` event with `assigned` action.
	Assigned githubEventIssuesAssigned
	// Closed is `issues` event with `closed` action.
	Closed githubEventIssuesClosed
	// Deleted is `issues` event with `deleted` action.
	Deleted githubEventIssuesDeleted
	// Demilestoned is `issues` event with `demilestoned` action.
	Demilestoned githubEventIssuesDemilestoned
	// Edited is `issues` event with `edited` action.
	Edited githubEventIssuesEdited
	// Labeled is `issues` event with `labeled` action.
	Labeled githubEventIssuesLabeled
	// Locked is `issues` event with `locked` action.
	Locked githubEventIssuesLocked
	// Milestoned is `issues` event with `milestoned` action.
	Milestoned githubEventIssuesMilestoned
	// Opened is `issues` event with `opened` action.
	Opened githubEventIssuesOpened
	// Pinned is `issues` event with `pinned` action.
	Pinned githubEventIssuesPinned
	// Reopened is `issues` event with `reopened` action.
	Reopened githubEventIssuesReopened
	// Transferred is `issues` event with `transferred` action.
	Transferred githubEventIssuesTransferred
	// Unassigned is `issues` event with `unassigned` action.
	Unassigned githubEventIssuesUnassigned
	// Unlabeled is `issues` event with `unlabeled` action.
	Unlabeled githubEventIssuesUnlabeled
	// Unlocked is `issues` event with `unlocked` action.
	Unlocked githubEventIssuesUnlocked
	// Unpinned is `issues` event with `unpinned` action.
	Unpinned githubEventIssuesUnpinned
}

// IssuesContext is the context type for Issues event handler to process
type IssuesContext = ProbotContext[GithubClient, github.IssuesEvent]

// Handler returns event handler function to process context
func (githubEventIssuesAllInOne) Handler(fn func(ctx IssuesContext)) Handler {
	return EventHandlerFunc[GithubClient, github.IssuesEvent](fn)
}

// githubEventIssues is the base event type of Issues
type githubEventIssues struct{}

// Type implement the WebhookEvent interface
func (githubEventIssues) Type() string { return "issues" }

// Action implement the WebhookEvent interface
func (githubEventIssues) Action() string { return "" }

// githubEventIssuesAssigned is the Assigned action of Issues event
type githubEventIssuesAssigned struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesAssigned) Action() string { return "assigned" }

// githubEventIssuesClosed is the Closed action of Issues event
type githubEventIssuesClosed struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesClosed) Action() string { return "closed" }

// githubEventIssuesDeleted is the Deleted action of Issues event
type githubEventIssuesDeleted struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesDeleted) Action() string { return "deleted" }

// githubEventIssuesDemilestoned is the Demilestoned action of Issues event
type githubEventIssuesDemilestoned struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesDemilestoned) Action() string { return "demilestoned" }

// githubEventIssuesEdited is the Edited action of Issues event
type githubEventIssuesEdited struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesEdited) Action() string { return "edited" }

// githubEventIssuesLabeled is the Labeled action of Issues event
type githubEventIssuesLabeled struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesLabeled) Action() string { return "labeled" }

// githubEventIssuesLocked is the Locked action of Issues event
type githubEventIssuesLocked struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesLocked) Action() string { return "locked" }

// githubEventIssuesMilestoned is the Milestoned action of Issues event
type githubEventIssuesMilestoned struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesMilestoned) Action() string { return "milestoned" }

// githubEventIssuesOpened is the Opened action of Issues event
type githubEventIssuesOpened struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesOpened) Action() string { return "opened" }

// githubEventIssuesPinned is the Pinned action of Issues event
type githubEventIssuesPinned struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesPinned) Action() string { return "pinned" }

// githubEventIssuesReopened is the Reopened action of Issues event
type githubEventIssuesReopened struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesReopened) Action() string { return "reopened" }

// githubEventIssuesTransferred is the Transferred action of Issues event
type githubEventIssuesTransferred struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesTransferred) Action() string { return "transferred" }

// githubEventIssuesUnassigned is the Unassigned action of Issues event
type githubEventIssuesUnassigned struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesUnassigned) Action() string { return "unassigned" }

// githubEventIssuesUnlabeled is the Unlabeled action of Issues event
type githubEventIssuesUnlabeled struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesUnlabeled) Action() string { return "unlabeled" }

// githubEventIssuesUnlocked is the Unlocked action of Issues event
type githubEventIssuesUnlocked struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesUnlocked) Action() string { return "unlocked" }

// githubEventIssuesUnpinned is the Unpinned action of Issues event
type githubEventIssuesUnpinned struct {
	githubEventIssues
}

// Action implement the WebhookEvent interface
func (githubEventIssuesUnpinned) Action() string { return "unpinned" }

// githubEventLabelAllInOne contains event and handler for type Label
type githubEventLabelAllInOne struct {
	githubEventLabel

	// Created is `label` event with `created` action.
	Created githubEventLabelCreated
	// Deleted is `label` event with `deleted` action.
	Deleted githubEventLabelDeleted
	// Edited is `label` event with `edited` action.
	Edited githubEventLabelEdited
}

// LabelContext is the context type for Label event handler to process
type LabelContext = ProbotContext[GithubClient, github.LabelEvent]

// Handler returns event handler function to process context
func (githubEventLabelAllInOne) Handler(fn func(ctx LabelContext)) Handler {
	return EventHandlerFunc[GithubClient, github.LabelEvent](fn)
}

// githubEventLabel is the base event type of Label
type githubEventLabel struct{}

// Type implement the WebhookEvent interface
func (githubEventLabel) Type() string { return "label" }

// Action implement the WebhookEvent interface
func (githubEventLabel) Action() string { return "" }

// githubEventLabelCreated is the Created action of Label event
type githubEventLabelCreated struct {
	githubEventLabel
}

// Action implement the WebhookEvent interface
func (githubEventLabelCreated) Action() string { return "created" }

// githubEventLabelDeleted is the Deleted action of Label event
type githubEventLabelDeleted struct {
	githubEventLabel
}

// Action implement the WebhookEvent interface
func (githubEventLabelDeleted) Action() string { return "deleted" }

// githubEventLabelEdited is the Edited action of Label event
type githubEventLabelEdited struct {
	githubEventLabel
}

// Action implement the WebhookEvent interface
func (githubEventLabelEdited) Action() string { return "edited" }

// githubEventMarketplacePurchaseAllInOne contains event and handler for type MarketplacePurchase
type githubEventMarketplacePurchaseAllInOne struct {
	githubEventMarketplacePurchase

	// Cancelled is `marketplace_purchase` event with `cancelled` action.
	Cancelled githubEventMarketplacePurchaseCancelled
	// Changed is `marketplace_purchase` event with `changed` action.
	Changed githubEventMarketplacePurchaseChanged
	// PendingChange is `marketplace_purchase` event with `pending_change` action.
	PendingChange githubEventMarketplacePurchasePendingChange
	// PendingChangeCancelled is `marketplace_purchase` event with `pending_change_cancelled` action.
	PendingChangeCancelled githubEventMarketplacePurchasePendingChangeCancelled
	// Purchased is `marketplace_purchase` event with `purchased` action.
	Purchased githubEventMarketplacePurchasePurchased
}

// MarketplacePurchaseContext is the context type for MarketplacePurchase event handler to process
type MarketplacePurchaseContext = ProbotContext[GithubClient, github.MarketplacePurchaseEvent]

// Handler returns event handler function to process context
func (githubEventMarketplacePurchaseAllInOne) Handler(fn func(ctx MarketplacePurchaseContext)) Handler {
	return EventHandlerFunc[GithubClient, github.MarketplacePurchaseEvent](fn)
}

// githubEventMarketplacePurchase is the base event type of MarketplacePurchase
type githubEventMarketplacePurchase struct{}

// Type implement the WebhookEvent interface
func (githubEventMarketplacePurchase) Type() string { return "marketplace_purchase" }

// Action implement the WebhookEvent interface
func (githubEventMarketplacePurchase) Action() string { return "" }

// githubEventMarketplacePurchaseCancelled is the Cancelled action of MarketplacePurchase event
type githubEventMarketplacePurchaseCancelled struct {
	githubEventMarketplacePurchase
}

// Action implement the WebhookEvent interface
func (githubEventMarketplacePurchaseCancelled) Action() string { return "cancelled" }

// githubEventMarketplacePurchaseChanged is the Changed action of MarketplacePurchase event
type githubEventMarketplacePurchaseChanged struct {
	githubEventMarketplacePurchase
}

// Action implement the WebhookEvent interface
func (githubEventMarketplacePurchaseChanged) Action() string { return "changed" }

// githubEventMarketplacePurchasePendingChange is the PendingChange action of MarketplacePurchase event
type githubEventMarketplacePurchasePendingChange struct {
	githubEventMarketplacePurchase
}

// Action implement the WebhookEvent interface
func (githubEventMarketplacePurchasePendingChange) Action() string { return "pending_change" }

// githubEventMarketplacePurchasePendingChangeCancelled is the PendingChangeCancelled action of MarketplacePurchase event
type githubEventMarketplacePurchasePendingChangeCancelled struct {
	githubEventMarketplacePurchase
}

// Action implement the WebhookEvent interface
func (githubEventMarketplacePurchasePendingChangeCancelled) Action() string {
	return "pending_change_cancelled"
}

// githubEventMarketplacePurchasePurchased is the Purchased action of MarketplacePurchase event
type githubEventMarketplacePurchasePurchased struct {
	githubEventMarketplacePurchase
}

// Action implement the WebhookEvent interface
func (githubEventMarketplacePurchasePurchased) Action() string { return "purchased" }

// githubEventMemberAllInOne contains event and handler for type Member
type githubEventMemberAllInOne struct {
	githubEventMember

	// Added is `member` event with `added` action.
	Added githubEventMemberAdded
	// Edited is `member` event with `edited` action.
	Edited githubEventMemberEdited
	// Removed is `member` event with `removed` action.
	Removed githubEventMemberRemoved
}

// MemberContext is the context type for Member event handler to process
type MemberContext = ProbotContext[GithubClient, github.MemberEvent]

// Handler returns event handler function to process context
func (githubEventMemberAllInOne) Handler(fn func(ctx MemberContext)) Handler {
	return EventHandlerFunc[GithubClient, github.MemberEvent](fn)
}

// githubEventMember is the base event type of Member
type githubEventMember struct{}

// Type implement the WebhookEvent interface
func (githubEventMember) Type() string { return "member" }

// Action implement the WebhookEvent interface
func (githubEventMember) Action() string { return "" }

// githubEventMemberAdded is the Added action of Member event
type githubEventMemberAdded struct {
	githubEventMember
}

// Action implement the WebhookEvent interface
func (githubEventMemberAdded) Action() string { return "added" }

// githubEventMemberEdited is the Edited action of Member event
type githubEventMemberEdited struct {
	githubEventMember
}

// Action implement the WebhookEvent interface
func (githubEventMemberEdited) Action() string { return "edited" }

// githubEventMemberRemoved is the Removed action of Member event
type githubEventMemberRemoved struct {
	githubEventMember
}

// Action implement the WebhookEvent interface
func (githubEventMemberRemoved) Action() string { return "removed" }

// githubEventMembershipAllInOne contains event and handler for type Membership
type githubEventMembershipAllInOne struct {
	githubEventMembership

	// Added is `membership` event with `added` action.
	Added githubEventMembershipAdded
	// Removed is `membership` event with `removed` action.
	Removed githubEventMembershipRemoved
}

// MembershipContext is the context type for Membership event handler to process
type MembershipContext = ProbotContext[GithubClient, github.MembershipEvent]

// Handler returns event handler function to process context
func (githubEventMembershipAllInOne) Handler(fn func(ctx MembershipContext)) Handler {
	return EventHandlerFunc[GithubClient, github.MembershipEvent](fn)
}

// githubEventMembership is the base event type of Membership
type githubEventMembership struct{}

// Type implement the WebhookEvent interface
func (githubEventMembership) Type() string { return "membership" }

// Action implement the WebhookEvent interface
func (githubEventMembership) Action() string { return "" }

// githubEventMembershipAdded is the Added action of Membership event
type githubEventMembershipAdded struct {
	githubEventMembership
}

// Action implement the WebhookEvent interface
func (githubEventMembershipAdded) Action() string { return "added" }

// githubEventMembershipRemoved is the Removed action of Membership event
type githubEventMembershipRemoved struct {
	githubEventMembership
}

// Action implement the WebhookEvent interface
func (githubEventMembershipRemoved) Action() string { return "removed" }

// githubEventMergeGroupAllInOne contains event and handler for type MergeGroup
type githubEventMergeGroupAllInOne struct {
	githubEventMergeGroup
}

// MergeGroupContext is the context type for MergeGroup event handler to process
type MergeGroupContext = ProbotContext[GithubClient, github.MergeGroupEvent]

// Handler returns event handler function to process context
func (githubEventMergeGroupAllInOne) Handler(fn func(ctx MergeGroupContext)) Handler {
	return EventHandlerFunc[GithubClient, github.MergeGroupEvent](fn)
}

// githubEventMergeGroup is the base event type of MergeGroup
type githubEventMergeGroup struct{}

// Type implement the WebhookEvent interface
func (githubEventMergeGroup) Type() string { return "merge_group" }

// Action implement the WebhookEvent interface
func (githubEventMergeGroup) Action() string { return "" }

// githubEventMetaAllInOne contains event and handler for type Meta
type githubEventMetaAllInOne struct {
	githubEventMeta

	// Deleted is `meta` event with `deleted` action.
	Deleted githubEventMetaDeleted
}

// MetaContext is the context type for Meta event handler to process
type MetaContext = ProbotContext[GithubClient, github.MetaEvent]

// Handler returns event handler function to process context
func (githubEventMetaAllInOne) Handler(fn func(ctx MetaContext)) Handler {
	return EventHandlerFunc[GithubClient, github.MetaEvent](fn)
}

// githubEventMeta is the base event type of Meta
type githubEventMeta struct{}

// Type implement the WebhookEvent interface
func (githubEventMeta) Type() string { return "meta" }

// Action implement the WebhookEvent interface
func (githubEventMeta) Action() string { return "" }

// githubEventMetaDeleted is the Deleted action of Meta event
type githubEventMetaDeleted struct {
	githubEventMeta
}

// Action implement the WebhookEvent interface
func (githubEventMetaDeleted) Action() string { return "deleted" }

// githubEventPullRequestReviewCommentAllInOne contains event and handler for type PullRequestReviewComment
type githubEventPullRequestReviewCommentAllInOne struct {
	githubEventPullRequestReviewComment

	// Created is `pull_request_review_comment` event with `created` action.
	Created githubEventPullRequestReviewCommentCreated
	// Deleted is `pull_request_review_comment` event with `deleted` action.
	Deleted githubEventPullRequestReviewCommentDeleted
	// Edited is `pull_request_review_comment` event with `edited` action.
	Edited githubEventPullRequestReviewCommentEdited
}

// PullRequestReviewCommentContext is the context type for PullRequestReviewComment event handler to process
type PullRequestReviewCommentContext = ProbotContext[GithubClient, github.PullRequestReviewCommentEvent]

// Handler returns event handler function to process context
func (githubEventPullRequestReviewCommentAllInOne) Handler(fn func(ctx PullRequestReviewCommentContext)) Handler {
	return EventHandlerFunc[GithubClient, github.PullRequestReviewCommentEvent](fn)
}

// githubEventPullRequestReviewComment is the base event type of PullRequestReviewComment
type githubEventPullRequestReviewComment struct{}

// Type implement the WebhookEvent interface
func (githubEventPullRequestReviewComment) Type() string { return "pull_request_review_comment" }

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewComment) Action() string { return "" }

// githubEventPullRequestReviewCommentCreated is the Created action of PullRequestReviewComment event
type githubEventPullRequestReviewCommentCreated struct {
	githubEventPullRequestReviewComment
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewCommentCreated) Action() string { return "created" }

// githubEventPullRequestReviewCommentDeleted is the Deleted action of PullRequestReviewComment event
type githubEventPullRequestReviewCommentDeleted struct {
	githubEventPullRequestReviewComment
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewCommentDeleted) Action() string { return "deleted" }

// githubEventPullRequestReviewCommentEdited is the Edited action of PullRequestReviewComment event
type githubEventPullRequestReviewCommentEdited struct {
	githubEventPullRequestReviewComment
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewCommentEdited) Action() string { return "edited" }

// githubEventPullRequestReviewThreadAllInOne contains event and handler for type PullRequestReviewThread
type githubEventPullRequestReviewThreadAllInOne struct {
	githubEventPullRequestReviewThread

	// Resolved is `pull_request_review_thread` event with `resolved` action.
	Resolved githubEventPullRequestReviewThreadResolved
	// Unresolved is `pull_request_review_thread` event with `unresolved` action.
	Unresolved githubEventPullRequestReviewThreadUnresolved
}

// PullRequestReviewThreadContext is the context type for PullRequestReviewThread event handler to process
type PullRequestReviewThreadContext = ProbotContext[GithubClient, github.PullRequestReviewThreadEvent]

// Handler returns event handler function to process context
func (githubEventPullRequestReviewThreadAllInOne) Handler(fn func(ctx PullRequestReviewThreadContext)) Handler {
	return EventHandlerFunc[GithubClient, github.PullRequestReviewThreadEvent](fn)
}

// githubEventPullRequestReviewThread is the base event type of PullRequestReviewThread
type githubEventPullRequestReviewThread struct{}

// Type implement the WebhookEvent interface
func (githubEventPullRequestReviewThread) Type() string { return "pull_request_review_thread" }

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewThread) Action() string { return "" }

// githubEventPullRequestReviewThreadResolved is the Resolved action of PullRequestReviewThread event
type githubEventPullRequestReviewThreadResolved struct {
	githubEventPullRequestReviewThread
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewThreadResolved) Action() string { return "resolved" }

// githubEventPullRequestReviewThreadUnresolved is the Unresolved action of PullRequestReviewThread event
type githubEventPullRequestReviewThreadUnresolved struct {
	githubEventPullRequestReviewThread
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewThreadUnresolved) Action() string { return "unresolved" }

// githubEventPullRequestReviewAllInOne contains event and handler for type PullRequestReview
type githubEventPullRequestReviewAllInOne struct {
	githubEventPullRequestReview

	// Dismissed is `pull_request_review` event with `dismissed` action.
	Dismissed githubEventPullRequestReviewDismissed
	// Edited is `pull_request_review` event with `edited` action.
	Edited githubEventPullRequestReviewEdited
	// Submitted is `pull_request_review` event with `submitted` action.
	Submitted githubEventPullRequestReviewSubmitted
}

// PullRequestReviewContext is the context type for PullRequestReview event handler to process
type PullRequestReviewContext = ProbotContext[GithubClient, github.PullRequestReviewEvent]

// Handler returns event handler function to process context
func (githubEventPullRequestReviewAllInOne) Handler(fn func(ctx PullRequestReviewContext)) Handler {
	return EventHandlerFunc[GithubClient, github.PullRequestReviewEvent](fn)
}

// githubEventPullRequestReview is the base event type of PullRequestReview
type githubEventPullRequestReview struct{}

// Type implement the WebhookEvent interface
func (githubEventPullRequestReview) Type() string { return "pull_request_review" }

// Action implement the WebhookEvent interface
func (githubEventPullRequestReview) Action() string { return "" }

// githubEventPullRequestReviewDismissed is the Dismissed action of PullRequestReview event
type githubEventPullRequestReviewDismissed struct {
	githubEventPullRequestReview
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewDismissed) Action() string { return "dismissed" }

// githubEventPullRequestReviewEdited is the Edited action of PullRequestReview event
type githubEventPullRequestReviewEdited struct {
	githubEventPullRequestReview
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewEdited) Action() string { return "edited" }

// githubEventPullRequestReviewSubmitted is the Submitted action of PullRequestReview event
type githubEventPullRequestReviewSubmitted struct {
	githubEventPullRequestReview
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewSubmitted) Action() string { return "submitted" }

// githubEventPullRequestAllInOne contains event and handler for type PullRequest
type githubEventPullRequestAllInOne struct {
	githubEventPullRequest

	// Assigned is `pull_request` event with `assigned` action.
	Assigned githubEventPullRequestAssigned
	// AutoMergeDisabled is `pull_request` event with `auto_merge_disabled` action.
	AutoMergeDisabled githubEventPullRequestAutoMergeDisabled
	// AutoMergeEnabled is `pull_request` event with `auto_merge_enabled` action.
	AutoMergeEnabled githubEventPullRequestAutoMergeEnabled
	// Closed is `pull_request` event with `closed` action.
	Closed githubEventPullRequestClosed
	// ConvertedToDraft is `pull_request` event with `converted_to_draft` action.
	ConvertedToDraft githubEventPullRequestConvertedToDraft
	// Demilestoned is `pull_request` event with `demilestoned` action.
	Demilestoned githubEventPullRequestDemilestoned
	// Dequeued is `pull_request` event with `dequeued` action.
	Dequeued githubEventPullRequestDequeued
	// Edited is `pull_request` event with `edited` action.
	Edited githubEventPullRequestEdited
	// Labeled is `pull_request` event with `labeled` action.
	Labeled githubEventPullRequestLabeled
	// Locked is `pull_request` event with `locked` action.
	Locked githubEventPullRequestLocked
	// Milestoned is `pull_request` event with `milestoned` action.
	Milestoned githubEventPullRequestMilestoned
	// Opened is `pull_request` event with `opened` action.
	Opened githubEventPullRequestOpened
	// ReadyForReview is `pull_request` event with `ready_for_review` action.
	ReadyForReview githubEventPullRequestReadyForReview
	// Reopened is `pull_request` event with `reopened` action.
	Reopened githubEventPullRequestReopened
	// ReviewRequestRemoved is `pull_request` event with `review_request_removed` action.
	ReviewRequestRemoved githubEventPullRequestReviewRequestRemoved
	// ReviewRequested is `pull_request` event with `review_requested` action.
	ReviewRequested githubEventPullRequestReviewRequested
	// Synchronize is `pull_request` event with `synchronize` action.
	Synchronize githubEventPullRequestSynchronize
	// Unassigned is `pull_request` event with `unassigned` action.
	Unassigned githubEventPullRequestUnassigned
	// Unlabeled is `pull_request` event with `unlabeled` action.
	Unlabeled githubEventPullRequestUnlabeled
	// Unlocked is `pull_request` event with `unlocked` action.
	Unlocked githubEventPullRequestUnlocked
}

// PullRequestContext is the context type for PullRequest event handler to process
type PullRequestContext = ProbotContext[GithubClient, github.PullRequestEvent]

// Handler returns event handler function to process context
func (githubEventPullRequestAllInOne) Handler(fn func(ctx PullRequestContext)) Handler {
	return EventHandlerFunc[GithubClient, github.PullRequestEvent](fn)
}

// githubEventPullRequest is the base event type of PullRequest
type githubEventPullRequest struct{}

// Type implement the WebhookEvent interface
func (githubEventPullRequest) Type() string { return "pull_request" }

// Action implement the WebhookEvent interface
func (githubEventPullRequest) Action() string { return "" }

// githubEventPullRequestAssigned is the Assigned action of PullRequest event
type githubEventPullRequestAssigned struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestAssigned) Action() string { return "assigned" }

// githubEventPullRequestAutoMergeDisabled is the AutoMergeDisabled action of PullRequest event
type githubEventPullRequestAutoMergeDisabled struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestAutoMergeDisabled) Action() string { return "auto_merge_disabled" }

// githubEventPullRequestAutoMergeEnabled is the AutoMergeEnabled action of PullRequest event
type githubEventPullRequestAutoMergeEnabled struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestAutoMergeEnabled) Action() string { return "auto_merge_enabled" }

// githubEventPullRequestClosed is the Closed action of PullRequest event
type githubEventPullRequestClosed struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestClosed) Action() string { return "closed" }

// githubEventPullRequestConvertedToDraft is the ConvertedToDraft action of PullRequest event
type githubEventPullRequestConvertedToDraft struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestConvertedToDraft) Action() string { return "converted_to_draft" }

// githubEventPullRequestDemilestoned is the Demilestoned action of PullRequest event
type githubEventPullRequestDemilestoned struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestDemilestoned) Action() string { return "demilestoned" }

// githubEventPullRequestDequeued is the Dequeued action of PullRequest event
type githubEventPullRequestDequeued struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestDequeued) Action() string { return "dequeued" }

// githubEventPullRequestEdited is the Edited action of PullRequest event
type githubEventPullRequestEdited struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestEdited) Action() string { return "edited" }

// githubEventPullRequestLabeled is the Labeled action of PullRequest event
type githubEventPullRequestLabeled struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestLabeled) Action() string { return "labeled" }

// githubEventPullRequestLocked is the Locked action of PullRequest event
type githubEventPullRequestLocked struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestLocked) Action() string { return "locked" }

// githubEventPullRequestMilestoned is the Milestoned action of PullRequest event
type githubEventPullRequestMilestoned struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestMilestoned) Action() string { return "milestoned" }

// githubEventPullRequestOpened is the Opened action of PullRequest event
type githubEventPullRequestOpened struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestOpened) Action() string { return "opened" }

// githubEventPullRequestReadyForReview is the ReadyForReview action of PullRequest event
type githubEventPullRequestReadyForReview struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReadyForReview) Action() string { return "ready_for_review" }

// githubEventPullRequestReopened is the Reopened action of PullRequest event
type githubEventPullRequestReopened struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReopened) Action() string { return "reopened" }

// githubEventPullRequestReviewRequestRemoved is the ReviewRequestRemoved action of PullRequest event
type githubEventPullRequestReviewRequestRemoved struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewRequestRemoved) Action() string { return "review_request_removed" }

// githubEventPullRequestReviewRequested is the ReviewRequested action of PullRequest event
type githubEventPullRequestReviewRequested struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestReviewRequested) Action() string { return "review_requested" }

// githubEventPullRequestSynchronize is the Synchronize action of PullRequest event
type githubEventPullRequestSynchronize struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestSynchronize) Action() string { return "synchronize" }

// githubEventPullRequestUnassigned is the Unassigned action of PullRequest event
type githubEventPullRequestUnassigned struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestUnassigned) Action() string { return "unassigned" }

// githubEventPullRequestUnlabeled is the Unlabeled action of PullRequest event
type githubEventPullRequestUnlabeled struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestUnlabeled) Action() string { return "unlabeled" }

// githubEventPullRequestUnlocked is the Unlocked action of PullRequest event
type githubEventPullRequestUnlocked struct {
	githubEventPullRequest
}

// Action implement the WebhookEvent interface
func (githubEventPullRequestUnlocked) Action() string { return "unlocked" }

// githubEventPushAllInOne contains event and handler for type Push
type githubEventPushAllInOne struct {
	githubEventPush
}

// PushContext is the context type for Push event handler to process
type PushContext = ProbotContext[GithubClient, github.PushEvent]

// Handler returns event handler function to process context
func (githubEventPushAllInOne) Handler(fn func(ctx PushContext)) Handler {
	return EventHandlerFunc[GithubClient, github.PushEvent](fn)
}

// githubEventPush is the base event type of Push
type githubEventPush struct{}

// Type implement the WebhookEvent interface
func (githubEventPush) Type() string { return "push" }

// Action implement the WebhookEvent interface
func (githubEventPush) Action() string { return "" }

// githubEventStatusAllInOne contains event and handler for type Status
type githubEventStatusAllInOne struct {
	githubEventStatus
}

// StatusContext is the context type for Status event handler to process
type StatusContext = ProbotContext[GithubClient, github.StatusEvent]

// Handler returns event handler function to process context
func (githubEventStatusAllInOne) Handler(fn func(ctx StatusContext)) Handler {
	return EventHandlerFunc[GithubClient, github.StatusEvent](fn)
}

// githubEventStatus is the base event type of Status
type githubEventStatus struct{}

// Type implement the WebhookEvent interface
func (githubEventStatus) Type() string { return "status" }

// Action implement the WebhookEvent interface
func (githubEventStatus) Action() string { return "" }

// githubEventWorkflowDispatchAllInOne contains event and handler for type WorkflowDispatch
type githubEventWorkflowDispatchAllInOne struct {
	githubEventWorkflowDispatch
}

// WorkflowDispatchContext is the context type for WorkflowDispatch event handler to process
type WorkflowDispatchContext = ProbotContext[GithubClient, github.WorkflowDispatchEvent]

// Handler returns event handler function to process context
func (githubEventWorkflowDispatchAllInOne) Handler(fn func(ctx WorkflowDispatchContext)) Handler {
	return EventHandlerFunc[GithubClient, github.WorkflowDispatchEvent](fn)
}

// githubEventWorkflowDispatch is the base event type of WorkflowDispatch
type githubEventWorkflowDispatch struct{}

// Type implement the WebhookEvent interface
func (githubEventWorkflowDispatch) Type() string { return "workflow_dispatch" }

// Action implement the WebhookEvent interface
func (githubEventWorkflowDispatch) Action() string { return "" }

// githubEventWorkflowJobAllInOne contains event and handler for type WorkflowJob
type githubEventWorkflowJobAllInOne struct {
	githubEventWorkflowJob

	// Completed is `workflow_job` event with `completed` action.
	Completed githubEventWorkflowJobCompleted
	// InProgress is `workflow_job` event with `in_progress` action.
	InProgress githubEventWorkflowJobInProgress
	// Queued is `workflow_job` event with `queued` action.
	Queued githubEventWorkflowJobQueued
	// Waiting is `workflow_job` event with `waiting` action.
	Waiting githubEventWorkflowJobWaiting
}

// WorkflowJobContext is the context type for WorkflowJob event handler to process
type WorkflowJobContext = ProbotContext[GithubClient, github.WorkflowJobEvent]

// Handler returns event handler function to process context
func (githubEventWorkflowJobAllInOne) Handler(fn func(ctx WorkflowJobContext)) Handler {
	return EventHandlerFunc[GithubClient, github.WorkflowJobEvent](fn)
}

// githubEventWorkflowJob is the base event type of WorkflowJob
type githubEventWorkflowJob struct{}

// Type implement the WebhookEvent interface
func (githubEventWorkflowJob) Type() string { return "workflow_job" }

// Action implement the WebhookEvent interface
func (githubEventWorkflowJob) Action() string { return "" }

// githubEventWorkflowJobCompleted is the Completed action of WorkflowJob event
type githubEventWorkflowJobCompleted struct {
	githubEventWorkflowJob
}

// Action implement the WebhookEvent interface
func (githubEventWorkflowJobCompleted) Action() string { return "completed" }

// githubEventWorkflowJobInProgress is the InProgress action of WorkflowJob event
type githubEventWorkflowJobInProgress struct {
	githubEventWorkflowJob
}

// Action implement the WebhookEvent interface
func (githubEventWorkflowJobInProgress) Action() string { return "in_progress" }

// githubEventWorkflowJobQueued is the Queued action of WorkflowJob event
type githubEventWorkflowJobQueued struct {
	githubEventWorkflowJob
}

// Action implement the WebhookEvent interface
func (githubEventWorkflowJobQueued) Action() string { return "queued" }

// githubEventWorkflowJobWaiting is the Waiting action of WorkflowJob event
type githubEventWorkflowJobWaiting struct {
	githubEventWorkflowJob
}

// Action implement the WebhookEvent interface
func (githubEventWorkflowJobWaiting) Action() string { return "waiting" }

// githubEventWorkflowRunAllInOne contains event and handler for type WorkflowRun
type githubEventWorkflowRunAllInOne struct {
	githubEventWorkflowRun

	// Completed is `workflow_run` event with `completed` action.
	Completed githubEventWorkflowRunCompleted
	// InProgress is `workflow_run` event with `in_progress` action.
	InProgress githubEventWorkflowRunInProgress
	// Requested is `workflow_run` event with `requested` action.
	Requested githubEventWorkflowRunRequested
}

// WorkflowRunContext is the context type for WorkflowRun event handler to process
type WorkflowRunContext = ProbotContext[GithubClient, github.WorkflowRunEvent]

// Handler returns event handler function to process context
func (githubEventWorkflowRunAllInOne) Handler(fn func(ctx WorkflowRunContext)) Handler {
	return EventHandlerFunc[GithubClient, github.WorkflowRunEvent](fn)
}

// githubEventWorkflowRun is the base event type of WorkflowRun
type githubEventWorkflowRun struct{}

// Type implement the WebhookEvent interface
func (githubEventWorkflowRun) Type() string { return "workflow_run" }

// Action implement the WebhookEvent interface
func (githubEventWorkflowRun) Action() string { return "" }

// githubEventWorkflowRunCompleted is the Completed action of WorkflowRun event
type githubEventWorkflowRunCompleted struct {
	githubEventWorkflowRun
}

// Action implement the WebhookEvent interface
func (githubEventWorkflowRunCompleted) Action() string { return "completed" }

// githubEventWorkflowRunInProgress is the InProgress action of WorkflowRun event
type githubEventWorkflowRunInProgress struct {
	githubEventWorkflowRun
}

// Action implement the WebhookEvent interface
func (githubEventWorkflowRunInProgress) Action() string { return "in_progress" }

// githubEventWorkflowRunRequested is the Requested action of WorkflowRun event
type githubEventWorkflowRunRequested struct {
	githubEventWorkflowRun
}

// Action implement the WebhookEvent interface
func (githubEventWorkflowRunRequested) Action() string { return "requested" }
