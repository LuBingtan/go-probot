// Code generated by codegen. DO NOT EDIT.

package probot

import "github.com/xanzy/go-gitlab"

// gitlabEvent contains all event and handler types
type gitlabEvent struct {
	// Push is webhook event `push`.
	Push gitlabEventPushAllInOne
	// Tag is webhook event `tag`.
	Tag gitlabEventTagAllInOne
	// Issue is webhook event `issue`.
	Issue gitlabEventIssueAllInOne
	// CommitComment is webhook event `commit_comment`.
	CommitComment gitlabEventCommitCommentAllInOne
	// MergeComment is webhook event `merge_comment`.
	MergeComment gitlabEventMergeCommentAllInOne
	// IssueComment is webhook event `issue_comment`.
	IssueComment gitlabEventIssueCommentAllInOne
	// SnippetComment is webhook event `snippet_comment`.
	SnippetComment gitlabEventSnippetCommentAllInOne
	// MergeRequest is webhook event `merge_request`.
	MergeRequest gitlabEventMergeRequestAllInOne
	// WikiPage is webhook event `wiki_page`.
	WikiPage gitlabEventWikiPageAllInOne
	// Pipeline is webhook event `pipeline`.
	Pipeline gitlabEventPipelineAllInOne
	// Job is webhook event `job`.
	Job gitlabEventJobAllInOne
	// Deployment is webhook event `deployment`.
	Deployment gitlabEventDeploymentAllInOne
	// Member is webhook event `member`.
	Member gitlabEventMemberAllInOne
	// SubGroup is webhook event `sub_group`.
	SubGroup gitlabEventSubGroupAllInOne
	// Release is webhook event `release`.
	Release gitlabEventReleaseAllInOne
	// PushSystem is webhook event `push_system`.
	PushSystem gitlabEventPushSystemAllInOne
	// TagPushSystem is webhook event `tag_push_system`.
	TagPushSystem gitlabEventTagPushSystemAllInOne
	// RepositoryUpdateSystem is webhook event `repository_update_system`.
	RepositoryUpdateSystem gitlabEventRepositoryUpdateSystemAllInOne
	// ProjectSystem is webhook event `project_system`.
	ProjectSystem gitlabEventProjectSystemAllInOne
	// GroupSystem is webhook event `group_system`.
	GroupSystem gitlabEventGroupSystemAllInOne
	// KeySystem is webhook event `key_system`.
	KeySystem gitlabEventKeySystemAllInOne
	// UserSystem is webhook event `user_system`.
	UserSystem gitlabEventUserSystemAllInOne
	// UserGroupSystem is webhook event `user_group_system`.
	UserGroupSystem gitlabEventUserGroupSystemAllInOne
	// UserTeamSystem is webhook event `user_team_system`.
	UserTeamSystem gitlabEventUserTeamSystemAllInOne
	// Build is webhook event `build`.
	Build gitlabEventBuildAllInOne
}

// gitlabEventPushAllInOne contains event and handler for type Push
type gitlabEventPushAllInOne struct {
	gitlabEventPush
}

// GitLabPushContext is the context type for Push event handler to process
type GitLabPushContext = ProbotContext[GitLabClient, gitlab.PushEvent]

// Handler returns event handler function to process context
func (gitlabEventPushAllInOne) Handler(fn func(ctx GitLabPushContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.PushEvent](fn)
}

// gitlabEventPush is the base event type of Push
type gitlabEventPush struct{}

// Type implement the WebhookEvent interface
func (gitlabEventPush) Type() string { return "Push Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventPush) Action() string { return "<no value>" }

// gitlabEventTagAllInOne contains event and handler for type Tag
type gitlabEventTagAllInOne struct {
	gitlabEventTag
}

// GitLabTagContext is the context type for Tag event handler to process
type GitLabTagContext = ProbotContext[GitLabClient, gitlab.TagEvent]

// Handler returns event handler function to process context
func (gitlabEventTagAllInOne) Handler(fn func(ctx GitLabTagContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.TagEvent](fn)
}

// gitlabEventTag is the base event type of Tag
type gitlabEventTag struct{}

// Type implement the WebhookEvent interface
func (gitlabEventTag) Type() string { return "Tag Push Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventTag) Action() string { return "<no value>" }

// gitlabEventIssueAllInOne contains event and handler for type Issue
type gitlabEventIssueAllInOne struct {
	gitlabEventIssue

	// Open is `issue` event with `open` action.
	Open gitlabEventIssueOpen
	// Close is `issue` event with `close` action.
	Close gitlabEventIssueClose
	// Reopen is `issue` event with `reopen` action.
	Reopen gitlabEventIssueReopen
	// Update is `issue` event with `update` action.
	Update gitlabEventIssueUpdate
}

// GitLabIssueContext is the context type for Issue event handler to process
type GitLabIssueContext = ProbotContext[GitLabClient, gitlab.IssueEvent]

// Handler returns event handler function to process context
func (gitlabEventIssueAllInOne) Handler(fn func(ctx GitLabIssueContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.IssueEvent](fn)
}

// gitlabEventIssue is the base event type of Issue
type gitlabEventIssue struct{}

// Type implement the WebhookEvent interface
func (gitlabEventIssue) Type() string { return "Issue Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventIssue) Action() string { return "<no value>" }

// gitlabEventIssueOpen is the Open action of Issue event
type gitlabEventIssueOpen struct {
	gitlabEventIssue
}

// Action implement the WebhookEvent interface
func (gitlabEventIssueOpen) Action() string { return "open" }

// gitlabEventIssueClose is the Close action of Issue event
type gitlabEventIssueClose struct {
	gitlabEventIssue
}

// Action implement the WebhookEvent interface
func (gitlabEventIssueClose) Action() string { return "close" }

// gitlabEventIssueReopen is the Reopen action of Issue event
type gitlabEventIssueReopen struct {
	gitlabEventIssue
}

// Action implement the WebhookEvent interface
func (gitlabEventIssueReopen) Action() string { return "reopen" }

// gitlabEventIssueUpdate is the Update action of Issue event
type gitlabEventIssueUpdate struct {
	gitlabEventIssue
}

// Action implement the WebhookEvent interface
func (gitlabEventIssueUpdate) Action() string { return "update" }

// gitlabEventCommitCommentAllInOne contains event and handler for type CommitComment
type gitlabEventCommitCommentAllInOne struct {
	gitlabEventCommitComment
}

// GitLabCommitCommentContext is the context type for CommitComment event handler to process
type GitLabCommitCommentContext = ProbotContext[GitLabClient, gitlab.CommitCommentEvent]

// Handler returns event handler function to process context
func (gitlabEventCommitCommentAllInOne) Handler(fn func(ctx GitLabCommitCommentContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.CommitCommentEvent](fn)
}

// gitlabEventCommitComment is the base event type of CommitComment
type gitlabEventCommitComment struct{}

// Type implement the WebhookEvent interface
func (gitlabEventCommitComment) Type() string { return "Note Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventCommitComment) Action() string { return "Commit" }

// gitlabEventMergeCommentAllInOne contains event and handler for type MergeComment
type gitlabEventMergeCommentAllInOne struct {
	gitlabEventMergeComment
}

// GitLabMergeCommentContext is the context type for MergeComment event handler to process
type GitLabMergeCommentContext = ProbotContext[GitLabClient, gitlab.MergeCommentEvent]

// Handler returns event handler function to process context
func (gitlabEventMergeCommentAllInOne) Handler(fn func(ctx GitLabMergeCommentContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.MergeCommentEvent](fn)
}

// gitlabEventMergeComment is the base event type of MergeComment
type gitlabEventMergeComment struct{}

// Type implement the WebhookEvent interface
func (gitlabEventMergeComment) Type() string { return "Note Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventMergeComment) Action() string { return "Merge" }

// gitlabEventIssueCommentAllInOne contains event and handler for type IssueComment
type gitlabEventIssueCommentAllInOne struct {
	gitlabEventIssueComment
}

// GitLabIssueCommentContext is the context type for IssueComment event handler to process
type GitLabIssueCommentContext = ProbotContext[GitLabClient, gitlab.IssueCommentEvent]

// Handler returns event handler function to process context
func (gitlabEventIssueCommentAllInOne) Handler(fn func(ctx GitLabIssueCommentContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.IssueCommentEvent](fn)
}

// gitlabEventIssueComment is the base event type of IssueComment
type gitlabEventIssueComment struct{}

// Type implement the WebhookEvent interface
func (gitlabEventIssueComment) Type() string { return "Note Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventIssueComment) Action() string { return "Issue" }

// gitlabEventSnippetCommentAllInOne contains event and handler for type SnippetComment
type gitlabEventSnippetCommentAllInOne struct {
	gitlabEventSnippetComment
}

// GitLabSnippetCommentContext is the context type for SnippetComment event handler to process
type GitLabSnippetCommentContext = ProbotContext[GitLabClient, gitlab.SnippetCommentEvent]

// Handler returns event handler function to process context
func (gitlabEventSnippetCommentAllInOne) Handler(fn func(ctx GitLabSnippetCommentContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.SnippetCommentEvent](fn)
}

// gitlabEventSnippetComment is the base event type of SnippetComment
type gitlabEventSnippetComment struct{}

// Type implement the WebhookEvent interface
func (gitlabEventSnippetComment) Type() string { return "Note Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventSnippetComment) Action() string { return "Snippet" }

// gitlabEventMergeRequestAllInOne contains event and handler for type MergeRequest
type gitlabEventMergeRequestAllInOne struct {
	gitlabEventMergeRequest

	// Open is `merge_request` event with `open` action.
	Open gitlabEventMergeRequestOpen
	// Close is `merge_request` event with `close` action.
	Close gitlabEventMergeRequestClose
	// Reopen is `merge_request` event with `reopen` action.
	Reopen gitlabEventMergeRequestReopen
	// Update is `merge_request` event with `update` action.
	Update gitlabEventMergeRequestUpdate
	// Approved is `merge_request` event with `approved` action.
	Approved gitlabEventMergeRequestApproved
	// Unapproved is `merge_request` event with `unapproved` action.
	Unapproved gitlabEventMergeRequestUnapproved
	// Approval is `merge_request` event with `approval` action.
	Approval gitlabEventMergeRequestApproval
	// Unapproval is `merge_request` event with `unapproval` action.
	Unapproval gitlabEventMergeRequestUnapproval
	// Merge is `merge_request` event with `merge` action.
	Merge gitlabEventMergeRequestMerge
}

// GitLabMergeRequestContext is the context type for MergeRequest event handler to process
type GitLabMergeRequestContext = ProbotContext[GitLabClient, gitlab.MergeEvent]

// Handler returns event handler function to process context
func (gitlabEventMergeRequestAllInOne) Handler(fn func(ctx GitLabMergeRequestContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.MergeEvent](fn)
}

// gitlabEventMergeRequest is the base event type of MergeRequest
type gitlabEventMergeRequest struct{}

// Type implement the WebhookEvent interface
func (gitlabEventMergeRequest) Type() string { return "Merge Request Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventMergeRequest) Action() string { return "<no value>" }

// gitlabEventMergeRequestOpen is the Open action of MergeRequest event
type gitlabEventMergeRequestOpen struct {
	gitlabEventMergeRequest
}

// Action implement the WebhookEvent interface
func (gitlabEventMergeRequestOpen) Action() string { return "open" }

// gitlabEventMergeRequestClose is the Close action of MergeRequest event
type gitlabEventMergeRequestClose struct {
	gitlabEventMergeRequest
}

// Action implement the WebhookEvent interface
func (gitlabEventMergeRequestClose) Action() string { return "close" }

// gitlabEventMergeRequestReopen is the Reopen action of MergeRequest event
type gitlabEventMergeRequestReopen struct {
	gitlabEventMergeRequest
}

// Action implement the WebhookEvent interface
func (gitlabEventMergeRequestReopen) Action() string { return "reopen" }

// gitlabEventMergeRequestUpdate is the Update action of MergeRequest event
type gitlabEventMergeRequestUpdate struct {
	gitlabEventMergeRequest
}

// Action implement the WebhookEvent interface
func (gitlabEventMergeRequestUpdate) Action() string { return "update" }

// gitlabEventMergeRequestApproved is the Approved action of MergeRequest event
type gitlabEventMergeRequestApproved struct {
	gitlabEventMergeRequest
}

// Action implement the WebhookEvent interface
func (gitlabEventMergeRequestApproved) Action() string { return "approved" }

// gitlabEventMergeRequestUnapproved is the Unapproved action of MergeRequest event
type gitlabEventMergeRequestUnapproved struct {
	gitlabEventMergeRequest
}

// Action implement the WebhookEvent interface
func (gitlabEventMergeRequestUnapproved) Action() string { return "unapproved" }

// gitlabEventMergeRequestApproval is the Approval action of MergeRequest event
type gitlabEventMergeRequestApproval struct {
	gitlabEventMergeRequest
}

// Action implement the WebhookEvent interface
func (gitlabEventMergeRequestApproval) Action() string { return "approval" }

// gitlabEventMergeRequestUnapproval is the Unapproval action of MergeRequest event
type gitlabEventMergeRequestUnapproval struct {
	gitlabEventMergeRequest
}

// Action implement the WebhookEvent interface
func (gitlabEventMergeRequestUnapproval) Action() string { return "unapproval" }

// gitlabEventMergeRequestMerge is the Merge action of MergeRequest event
type gitlabEventMergeRequestMerge struct {
	gitlabEventMergeRequest
}

// Action implement the WebhookEvent interface
func (gitlabEventMergeRequestMerge) Action() string { return "merge" }

// gitlabEventWikiPageAllInOne contains event and handler for type WikiPage
type gitlabEventWikiPageAllInOne struct {
	gitlabEventWikiPage
}

// GitLabWikiPageContext is the context type for WikiPage event handler to process
type GitLabWikiPageContext = ProbotContext[GitLabClient, gitlab.WikiPageEvent]

// Handler returns event handler function to process context
func (gitlabEventWikiPageAllInOne) Handler(fn func(ctx GitLabWikiPageContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.WikiPageEvent](fn)
}

// gitlabEventWikiPage is the base event type of WikiPage
type gitlabEventWikiPage struct{}

// Type implement the WebhookEvent interface
func (gitlabEventWikiPage) Type() string { return "Wiki Page Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventWikiPage) Action() string { return "<no value>" }

// gitlabEventPipelineAllInOne contains event and handler for type Pipeline
type gitlabEventPipelineAllInOne struct {
	gitlabEventPipeline
}

// GitLabPipelineContext is the context type for Pipeline event handler to process
type GitLabPipelineContext = ProbotContext[GitLabClient, gitlab.PipelineEvent]

// Handler returns event handler function to process context
func (gitlabEventPipelineAllInOne) Handler(fn func(ctx GitLabPipelineContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.PipelineEvent](fn)
}

// gitlabEventPipeline is the base event type of Pipeline
type gitlabEventPipeline struct{}

// Type implement the WebhookEvent interface
func (gitlabEventPipeline) Type() string { return "Pipeline Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventPipeline) Action() string { return "<no value>" }

// gitlabEventJobAllInOne contains event and handler for type Job
type gitlabEventJobAllInOne struct {
	gitlabEventJob
}

// GitLabJobContext is the context type for Job event handler to process
type GitLabJobContext = ProbotContext[GitLabClient, gitlab.JobEvent]

// Handler returns event handler function to process context
func (gitlabEventJobAllInOne) Handler(fn func(ctx GitLabJobContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.JobEvent](fn)
}

// gitlabEventJob is the base event type of Job
type gitlabEventJob struct{}

// Type implement the WebhookEvent interface
func (gitlabEventJob) Type() string { return "Job Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventJob) Action() string { return "<no value>" }

// gitlabEventDeploymentAllInOne contains event and handler for type Deployment
type gitlabEventDeploymentAllInOne struct {
	gitlabEventDeployment
}

// GitLabDeploymentContext is the context type for Deployment event handler to process
type GitLabDeploymentContext = ProbotContext[GitLabClient, gitlab.DeploymentEvent]

// Handler returns event handler function to process context
func (gitlabEventDeploymentAllInOne) Handler(fn func(ctx GitLabDeploymentContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.DeploymentEvent](fn)
}

// gitlabEventDeployment is the base event type of Deployment
type gitlabEventDeployment struct{}

// Type implement the WebhookEvent interface
func (gitlabEventDeployment) Type() string { return "Deployment Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventDeployment) Action() string { return "<no value>" }

// gitlabEventMemberAllInOne contains event and handler for type Member
type gitlabEventMemberAllInOne struct {
	gitlabEventMember
}

// GitLabMemberContext is the context type for Member event handler to process
type GitLabMemberContext = ProbotContext[GitLabClient, gitlab.MemberEvent]

// Handler returns event handler function to process context
func (gitlabEventMemberAllInOne) Handler(fn func(ctx GitLabMemberContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.MemberEvent](fn)
}

// gitlabEventMember is the base event type of Member
type gitlabEventMember struct{}

// Type implement the WebhookEvent interface
func (gitlabEventMember) Type() string { return "Member Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventMember) Action() string { return "<no value>" }

// gitlabEventSubGroupAllInOne contains event and handler for type SubGroup
type gitlabEventSubGroupAllInOne struct {
	gitlabEventSubGroup
}

// GitLabSubGroupContext is the context type for SubGroup event handler to process
type GitLabSubGroupContext = ProbotContext[GitLabClient, gitlab.SubGroupEvent]

// Handler returns event handler function to process context
func (gitlabEventSubGroupAllInOne) Handler(fn func(ctx GitLabSubGroupContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.SubGroupEvent](fn)
}

// gitlabEventSubGroup is the base event type of SubGroup
type gitlabEventSubGroup struct{}

// Type implement the WebhookEvent interface
func (gitlabEventSubGroup) Type() string { return "Subgroup Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventSubGroup) Action() string { return "<no value>" }

// gitlabEventReleaseAllInOne contains event and handler for type Release
type gitlabEventReleaseAllInOne struct {
	gitlabEventRelease

	// Create is `release` event with `create` action.
	Create gitlabEventReleaseCreate
	// Update is `release` event with `update` action.
	Update gitlabEventReleaseUpdate
}

// GitLabReleaseContext is the context type for Release event handler to process
type GitLabReleaseContext = ProbotContext[GitLabClient, gitlab.ReleaseEvent]

// Handler returns event handler function to process context
func (gitlabEventReleaseAllInOne) Handler(fn func(ctx GitLabReleaseContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.ReleaseEvent](fn)
}

// gitlabEventRelease is the base event type of Release
type gitlabEventRelease struct{}

// Type implement the WebhookEvent interface
func (gitlabEventRelease) Type() string { return "Release Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventRelease) Action() string { return "<no value>" }

// gitlabEventReleaseCreate is the Create action of Release event
type gitlabEventReleaseCreate struct {
	gitlabEventRelease
}

// Action implement the WebhookEvent interface
func (gitlabEventReleaseCreate) Action() string { return "create" }

// gitlabEventReleaseUpdate is the Update action of Release event
type gitlabEventReleaseUpdate struct {
	gitlabEventRelease
}

// Action implement the WebhookEvent interface
func (gitlabEventReleaseUpdate) Action() string { return "update" }

// gitlabEventPushSystemAllInOne contains event and handler for type PushSystem
type gitlabEventPushSystemAllInOne struct {
	gitlabEventPushSystem
}

// GitLabPushSystemContext is the context type for PushSystem event handler to process
type GitLabPushSystemContext = ProbotContext[GitLabClient, gitlab.PushSystemEvent]

// Handler returns event handler function to process context
func (gitlabEventPushSystemAllInOne) Handler(fn func(ctx GitLabPushSystemContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.PushSystemEvent](fn)
}

// gitlabEventPushSystem is the base event type of PushSystem
type gitlabEventPushSystem struct{}

// Type implement the WebhookEvent interface
func (gitlabEventPushSystem) Type() string { return "System Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventPushSystem) Action() string { return "Push" }

// gitlabEventTagPushSystemAllInOne contains event and handler for type TagPushSystem
type gitlabEventTagPushSystemAllInOne struct {
	gitlabEventTagPushSystem
}

// GitLabTagPushSystemContext is the context type for TagPushSystem event handler to process
type GitLabTagPushSystemContext = ProbotContext[GitLabClient, gitlab.TagPushSystemEvent]

// Handler returns event handler function to process context
func (gitlabEventTagPushSystemAllInOne) Handler(fn func(ctx GitLabTagPushSystemContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.TagPushSystemEvent](fn)
}

// gitlabEventTagPushSystem is the base event type of TagPushSystem
type gitlabEventTagPushSystem struct{}

// Type implement the WebhookEvent interface
func (gitlabEventTagPushSystem) Type() string { return "System Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventTagPushSystem) Action() string { return "TagPush" }

// gitlabEventRepositoryUpdateSystemAllInOne contains event and handler for type RepositoryUpdateSystem
type gitlabEventRepositoryUpdateSystemAllInOne struct {
	gitlabEventRepositoryUpdateSystem
}

// GitLabRepositoryUpdateSystemContext is the context type for RepositoryUpdateSystem event handler to process
type GitLabRepositoryUpdateSystemContext = ProbotContext[GitLabClient, gitlab.RepositoryUpdateSystemEvent]

// Handler returns event handler function to process context
func (gitlabEventRepositoryUpdateSystemAllInOne) Handler(fn func(ctx GitLabRepositoryUpdateSystemContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.RepositoryUpdateSystemEvent](fn)
}

// gitlabEventRepositoryUpdateSystem is the base event type of RepositoryUpdateSystem
type gitlabEventRepositoryUpdateSystem struct{}

// Type implement the WebhookEvent interface
func (gitlabEventRepositoryUpdateSystem) Type() string { return "System Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventRepositoryUpdateSystem) Action() string { return "RepositoryUpdate" }

// gitlabEventProjectSystemAllInOne contains event and handler for type ProjectSystem
type gitlabEventProjectSystemAllInOne struct {
	gitlabEventProjectSystem
}

// GitLabProjectSystemContext is the context type for ProjectSystem event handler to process
type GitLabProjectSystemContext = ProbotContext[GitLabClient, gitlab.ProjectSystemEvent]

// Handler returns event handler function to process context
func (gitlabEventProjectSystemAllInOne) Handler(fn func(ctx GitLabProjectSystemContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.ProjectSystemEvent](fn)
}

// gitlabEventProjectSystem is the base event type of ProjectSystem
type gitlabEventProjectSystem struct{}

// Type implement the WebhookEvent interface
func (gitlabEventProjectSystem) Type() string { return "System Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventProjectSystem) Action() string { return "Project" }

// gitlabEventGroupSystemAllInOne contains event and handler for type GroupSystem
type gitlabEventGroupSystemAllInOne struct {
	gitlabEventGroupSystem
}

// GitLabGroupSystemContext is the context type for GroupSystem event handler to process
type GitLabGroupSystemContext = ProbotContext[GitLabClient, gitlab.GroupSystemEvent]

// Handler returns event handler function to process context
func (gitlabEventGroupSystemAllInOne) Handler(fn func(ctx GitLabGroupSystemContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.GroupSystemEvent](fn)
}

// gitlabEventGroupSystem is the base event type of GroupSystem
type gitlabEventGroupSystem struct{}

// Type implement the WebhookEvent interface
func (gitlabEventGroupSystem) Type() string { return "System Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventGroupSystem) Action() string { return "Group" }

// gitlabEventKeySystemAllInOne contains event and handler for type KeySystem
type gitlabEventKeySystemAllInOne struct {
	gitlabEventKeySystem
}

// GitLabKeySystemContext is the context type for KeySystem event handler to process
type GitLabKeySystemContext = ProbotContext[GitLabClient, gitlab.KeySystemEvent]

// Handler returns event handler function to process context
func (gitlabEventKeySystemAllInOne) Handler(fn func(ctx GitLabKeySystemContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.KeySystemEvent](fn)
}

// gitlabEventKeySystem is the base event type of KeySystem
type gitlabEventKeySystem struct{}

// Type implement the WebhookEvent interface
func (gitlabEventKeySystem) Type() string { return "System Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventKeySystem) Action() string { return "Key" }

// gitlabEventUserSystemAllInOne contains event and handler for type UserSystem
type gitlabEventUserSystemAllInOne struct {
	gitlabEventUserSystem
}

// GitLabUserSystemContext is the context type for UserSystem event handler to process
type GitLabUserSystemContext = ProbotContext[GitLabClient, gitlab.UserSystemEvent]

// Handler returns event handler function to process context
func (gitlabEventUserSystemAllInOne) Handler(fn func(ctx GitLabUserSystemContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.UserSystemEvent](fn)
}

// gitlabEventUserSystem is the base event type of UserSystem
type gitlabEventUserSystem struct{}

// Type implement the WebhookEvent interface
func (gitlabEventUserSystem) Type() string { return "System Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventUserSystem) Action() string { return "User" }

// gitlabEventUserGroupSystemAllInOne contains event and handler for type UserGroupSystem
type gitlabEventUserGroupSystemAllInOne struct {
	gitlabEventUserGroupSystem
}

// GitLabUserGroupSystemContext is the context type for UserGroupSystem event handler to process
type GitLabUserGroupSystemContext = ProbotContext[GitLabClient, gitlab.UserGroupSystemEvent]

// Handler returns event handler function to process context
func (gitlabEventUserGroupSystemAllInOne) Handler(fn func(ctx GitLabUserGroupSystemContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.UserGroupSystemEvent](fn)
}

// gitlabEventUserGroupSystem is the base event type of UserGroupSystem
type gitlabEventUserGroupSystem struct{}

// Type implement the WebhookEvent interface
func (gitlabEventUserGroupSystem) Type() string { return "System Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventUserGroupSystem) Action() string { return "UserGroup" }

// gitlabEventUserTeamSystemAllInOne contains event and handler for type UserTeamSystem
type gitlabEventUserTeamSystemAllInOne struct {
	gitlabEventUserTeamSystem
}

// GitLabUserTeamSystemContext is the context type for UserTeamSystem event handler to process
type GitLabUserTeamSystemContext = ProbotContext[GitLabClient, gitlab.UserTeamSystemEvent]

// Handler returns event handler function to process context
func (gitlabEventUserTeamSystemAllInOne) Handler(fn func(ctx GitLabUserTeamSystemContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.UserTeamSystemEvent](fn)
}

// gitlabEventUserTeamSystem is the base event type of UserTeamSystem
type gitlabEventUserTeamSystem struct{}

// Type implement the WebhookEvent interface
func (gitlabEventUserTeamSystem) Type() string { return "System Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventUserTeamSystem) Action() string { return "UserTeam" }

// gitlabEventBuildAllInOne contains event and handler for type Build
type gitlabEventBuildAllInOne struct {
	gitlabEventBuild
}

// GitLabBuildContext is the context type for Build event handler to process
type GitLabBuildContext = ProbotContext[GitLabClient, gitlab.BuildEvent]

// Handler returns event handler function to process context
func (gitlabEventBuildAllInOne) Handler(fn func(ctx GitLabBuildContext)) Handler {
	return EventHandlerFunc[GitLabClient, gitlab.BuildEvent](fn)
}

// gitlabEventBuild is the base event type of Build
type gitlabEventBuild struct{}

// Type implement the WebhookEvent interface
func (gitlabEventBuild) Type() string { return "Build Hook" }

// Action implement the WebhookEvent interface
func (gitlabEventBuild) Action() string { return "<no value>" }
