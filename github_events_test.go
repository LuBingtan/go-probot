// Code generated by codegen. DO NOT EDIT.

package probot_test

import (
	"fmt"
	"testing"

	"github.com/airconduct/go-probot"
	"github.com/google/go-github/v48/github"
)

func TestBranchProtectionRule(t *testing.T) {
	checkEvent(t, probot.Github.BranchProtectionRule, "branch_protection_rule", "")
	checkEvent(t, probot.Github.BranchProtectionRule.Deleted, "branch_protection_rule", "deleted")
	checkEvent(t, probot.Github.BranchProtectionRule.Created, "branch_protection_rule", "created")
	checkEvent(t, probot.Github.BranchProtectionRule.Edited, "branch_protection_rule", "edited")

	h := probot.Github.BranchProtectionRule.Handler(func(ctx probot.BranchProtectionRuleContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.BranchProtectionRuleEvent])(nil)
}

func TestCheckRun(t *testing.T) {
	checkEvent(t, probot.Github.CheckRun, "check_run", "")
	checkEvent(t, probot.Github.CheckRun.Completed, "check_run", "completed")
	checkEvent(t, probot.Github.CheckRun.Created, "check_run", "created")
	checkEvent(t, probot.Github.CheckRun.RequestedAction, "check_run", "requested_action")
	checkEvent(t, probot.Github.CheckRun.Rerequested, "check_run", "rerequested")

	h := probot.Github.CheckRun.Handler(func(ctx probot.CheckRunContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.CheckRunEvent])(nil)
}

func TestCheckSuite(t *testing.T) {
	checkEvent(t, probot.Github.CheckSuite, "check_suite", "")
	checkEvent(t, probot.Github.CheckSuite.Completed, "check_suite", "completed")
	checkEvent(t, probot.Github.CheckSuite.Requested, "check_suite", "requested")
	checkEvent(t, probot.Github.CheckSuite.Rerequested, "check_suite", "rerequested")

	h := probot.Github.CheckSuite.Handler(func(ctx probot.CheckSuiteContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.CheckSuiteEvent])(nil)
}

func TestCodeScanningAlert(t *testing.T) {
	checkEvent(t, probot.Github.CodeScanningAlert, "code_scanning_alert", "")
	checkEvent(t, probot.Github.CodeScanningAlert.AppearedInBranch, "code_scanning_alert", "appeared_in_branch")
	checkEvent(t, probot.Github.CodeScanningAlert.ClosedByUser, "code_scanning_alert", "closed_by_user")
	checkEvent(t, probot.Github.CodeScanningAlert.Created, "code_scanning_alert", "created")
	checkEvent(t, probot.Github.CodeScanningAlert.Fixed, "code_scanning_alert", "fixed")
	checkEvent(t, probot.Github.CodeScanningAlert.Reopened, "code_scanning_alert", "reopened")
	checkEvent(t, probot.Github.CodeScanningAlert.ReopenedByUser, "code_scanning_alert", "reopened_by_user")

	h := probot.Github.CodeScanningAlert.Handler(func(ctx probot.CodeScanningAlertContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.CodeScanningAlertEvent])(nil)
}

func TestCommitComment(t *testing.T) {
	checkEvent(t, probot.Github.CommitComment, "commit_comment", "")
	checkEvent(t, probot.Github.CommitComment.Created, "commit_comment", "created")

	h := probot.Github.CommitComment.Handler(func(ctx probot.CommitCommentContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.CommitCommentEvent])(nil)
}

func TestCreate(t *testing.T) {
	checkEvent(t, probot.Github.Create, "create", "")

	h := probot.Github.Create.Handler(func(ctx probot.CreateContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.CreateEvent])(nil)
}

func TestDelete(t *testing.T) {
	checkEvent(t, probot.Github.Delete, "delete", "")

	h := probot.Github.Delete.Handler(func(ctx probot.DeleteContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.DeleteEvent])(nil)
}

func TestDeployKey(t *testing.T) {
	checkEvent(t, probot.Github.DeployKey, "deploy_key", "")
	checkEvent(t, probot.Github.DeployKey.Created, "deploy_key", "created")
	checkEvent(t, probot.Github.DeployKey.Deleted, "deploy_key", "deleted")

	h := probot.Github.DeployKey.Handler(func(ctx probot.DeployKeyContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.DeployKeyEvent])(nil)
}

func TestDeploymentStatus(t *testing.T) {
	checkEvent(t, probot.Github.DeploymentStatus, "deployment_status", "")
	checkEvent(t, probot.Github.DeploymentStatus.Created, "deployment_status", "created")

	h := probot.Github.DeploymentStatus.Handler(func(ctx probot.DeploymentStatusContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.DeploymentStatusEvent])(nil)
}

func TestDeployment(t *testing.T) {
	checkEvent(t, probot.Github.Deployment, "deployment", "")
	checkEvent(t, probot.Github.Deployment.Created, "deployment", "created")

	h := probot.Github.Deployment.Handler(func(ctx probot.DeploymentContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.DeploymentEvent])(nil)
}

func TestDiscussion(t *testing.T) {
	checkEvent(t, probot.Github.Discussion, "discussion", "")
	checkEvent(t, probot.Github.Discussion.Answered, "discussion", "answered")
	checkEvent(t, probot.Github.Discussion.CategoryChanged, "discussion", "category_changed")
	checkEvent(t, probot.Github.Discussion.Created, "discussion", "created")
	checkEvent(t, probot.Github.Discussion.Deleted, "discussion", "deleted")
	checkEvent(t, probot.Github.Discussion.Edited, "discussion", "edited")
	checkEvent(t, probot.Github.Discussion.Labeled, "discussion", "labeled")
	checkEvent(t, probot.Github.Discussion.Locked, "discussion", "locked")
	checkEvent(t, probot.Github.Discussion.Pinned, "discussion", "pinned")
	checkEvent(t, probot.Github.Discussion.Transferred, "discussion", "transferred")
	checkEvent(t, probot.Github.Discussion.Unanswered, "discussion", "unanswered")
	checkEvent(t, probot.Github.Discussion.Unlabeled, "discussion", "unlabeled")
	checkEvent(t, probot.Github.Discussion.Unlocked, "discussion", "unlocked")
	checkEvent(t, probot.Github.Discussion.Unpinned, "discussion", "unpinned")

	h := probot.Github.Discussion.Handler(func(ctx probot.DiscussionContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.DiscussionEvent])(nil)
}

func TestFork(t *testing.T) {
	checkEvent(t, probot.Github.Fork, "fork", "")

	h := probot.Github.Fork.Handler(func(ctx probot.ForkContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.ForkEvent])(nil)
}

func TestGitHubAppAuthorization(t *testing.T) {
	checkEvent(t, probot.Github.GitHubAppAuthorization, "git_hub_app_authorization", "")

	h := probot.Github.GitHubAppAuthorization.Handler(func(ctx probot.GitHubAppAuthorizationContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.GitHubAppAuthorizationEvent])(nil)
}

func TestGollum(t *testing.T) {
	checkEvent(t, probot.Github.Gollum, "gollum", "")

	h := probot.Github.Gollum.Handler(func(ctx probot.GollumContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.GollumEvent])(nil)
}

func TestInstallationRepositories(t *testing.T) {
	checkEvent(t, probot.Github.InstallationRepositories, "installation_repositories", "")
	checkEvent(t, probot.Github.InstallationRepositories.Added, "installation_repositories", "added")
	checkEvent(t, probot.Github.InstallationRepositories.Removed, "installation_repositories", "removed")

	h := probot.Github.InstallationRepositories.Handler(func(ctx probot.InstallationRepositoriesContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.InstallationRepositoriesEvent])(nil)
}

func TestInstallation(t *testing.T) {
	checkEvent(t, probot.Github.Installation, "installation", "")
	checkEvent(t, probot.Github.Installation.Created, "installation", "created")
	checkEvent(t, probot.Github.Installation.Deleted, "installation", "deleted")
	checkEvent(t, probot.Github.Installation.NewPermissionsAccepted, "installation", "new_permissions_accepted")
	checkEvent(t, probot.Github.Installation.Suspend, "installation", "suspend")
	checkEvent(t, probot.Github.Installation.Unsuspend, "installation", "unsuspend")

	h := probot.Github.Installation.Handler(func(ctx probot.InstallationContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.InstallationEvent])(nil)
}

func TestIssueComment(t *testing.T) {
	checkEvent(t, probot.Github.IssueComment, "issue_comment", "")
	checkEvent(t, probot.Github.IssueComment.Created, "issue_comment", "created")
	checkEvent(t, probot.Github.IssueComment.Deleted, "issue_comment", "deleted")
	checkEvent(t, probot.Github.IssueComment.Edited, "issue_comment", "edited")

	h := probot.Github.IssueComment.Handler(func(ctx probot.IssueCommentContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.IssueCommentEvent])(nil)
}

func TestIssues(t *testing.T) {
	checkEvent(t, probot.Github.Issues, "issues", "")
	checkEvent(t, probot.Github.Issues.Assigned, "issues", "assigned")
	checkEvent(t, probot.Github.Issues.Closed, "issues", "closed")
	checkEvent(t, probot.Github.Issues.Deleted, "issues", "deleted")
	checkEvent(t, probot.Github.Issues.Demilestoned, "issues", "demilestoned")
	checkEvent(t, probot.Github.Issues.Edited, "issues", "edited")
	checkEvent(t, probot.Github.Issues.Labeled, "issues", "labeled")
	checkEvent(t, probot.Github.Issues.Locked, "issues", "locked")
	checkEvent(t, probot.Github.Issues.Milestoned, "issues", "milestoned")
	checkEvent(t, probot.Github.Issues.Opened, "issues", "opened")
	checkEvent(t, probot.Github.Issues.Pinned, "issues", "pinned")
	checkEvent(t, probot.Github.Issues.Reopened, "issues", "reopened")
	checkEvent(t, probot.Github.Issues.Transferred, "issues", "transferred")
	checkEvent(t, probot.Github.Issues.Unassigned, "issues", "unassigned")
	checkEvent(t, probot.Github.Issues.Unlabeled, "issues", "unlabeled")
	checkEvent(t, probot.Github.Issues.Unlocked, "issues", "unlocked")
	checkEvent(t, probot.Github.Issues.Unpinned, "issues", "unpinned")

	h := probot.Github.Issues.Handler(func(ctx probot.IssuesContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.IssuesEvent])(nil)
}

func TestLabel(t *testing.T) {
	checkEvent(t, probot.Github.Label, "label", "")
	checkEvent(t, probot.Github.Label.Created, "label", "created")
	checkEvent(t, probot.Github.Label.Deleted, "label", "deleted")
	checkEvent(t, probot.Github.Label.Edited, "label", "edited")

	h := probot.Github.Label.Handler(func(ctx probot.LabelContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.LabelEvent])(nil)
}

func TestMarketplacePurchase(t *testing.T) {
	checkEvent(t, probot.Github.MarketplacePurchase, "marketplace_purchase", "")
	checkEvent(t, probot.Github.MarketplacePurchase.Cancelled, "marketplace_purchase", "cancelled")
	checkEvent(t, probot.Github.MarketplacePurchase.Changed, "marketplace_purchase", "changed")
	checkEvent(t, probot.Github.MarketplacePurchase.PendingChange, "marketplace_purchase", "pending_change")
	checkEvent(t, probot.Github.MarketplacePurchase.PendingChangeCancelled, "marketplace_purchase", "pending_change_cancelled")
	checkEvent(t, probot.Github.MarketplacePurchase.Purchased, "marketplace_purchase", "purchased")

	h := probot.Github.MarketplacePurchase.Handler(func(ctx probot.MarketplacePurchaseContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.MarketplacePurchaseEvent])(nil)
}

func TestMember(t *testing.T) {
	checkEvent(t, probot.Github.Member, "member", "")
	checkEvent(t, probot.Github.Member.Added, "member", "added")
	checkEvent(t, probot.Github.Member.Edited, "member", "edited")
	checkEvent(t, probot.Github.Member.Removed, "member", "removed")

	h := probot.Github.Member.Handler(func(ctx probot.MemberContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.MemberEvent])(nil)
}

func TestMembership(t *testing.T) {
	checkEvent(t, probot.Github.Membership, "membership", "")
	checkEvent(t, probot.Github.Membership.Added, "membership", "added")
	checkEvent(t, probot.Github.Membership.Removed, "membership", "removed")

	h := probot.Github.Membership.Handler(func(ctx probot.MembershipContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.MembershipEvent])(nil)
}

func TestMergeGroup(t *testing.T) {
	checkEvent(t, probot.Github.MergeGroup, "merge_group", "")

	h := probot.Github.MergeGroup.Handler(func(ctx probot.MergeGroupContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.MergeGroupEvent])(nil)
}

func TestMeta(t *testing.T) {
	checkEvent(t, probot.Github.Meta, "meta", "")
	checkEvent(t, probot.Github.Meta.Deleted, "meta", "deleted")

	h := probot.Github.Meta.Handler(func(ctx probot.MetaContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.MetaEvent])(nil)
}

func TestPullRequestReviewComment(t *testing.T) {
	checkEvent(t, probot.Github.PullRequestReviewComment, "pull_request_review_comment", "")
	checkEvent(t, probot.Github.PullRequestReviewComment.Created, "pull_request_review_comment", "created")
	checkEvent(t, probot.Github.PullRequestReviewComment.Deleted, "pull_request_review_comment", "deleted")
	checkEvent(t, probot.Github.PullRequestReviewComment.Edited, "pull_request_review_comment", "edited")

	h := probot.Github.PullRequestReviewComment.Handler(func(ctx probot.PullRequestReviewCommentContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.PullRequestReviewCommentEvent])(nil)
}

func TestPullRequestReviewThread(t *testing.T) {
	checkEvent(t, probot.Github.PullRequestReviewThread, "pull_request_review_thread", "")
	checkEvent(t, probot.Github.PullRequestReviewThread.Resolved, "pull_request_review_thread", "resolved")
	checkEvent(t, probot.Github.PullRequestReviewThread.Unresolved, "pull_request_review_thread", "unresolved")

	h := probot.Github.PullRequestReviewThread.Handler(func(ctx probot.PullRequestReviewThreadContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.PullRequestReviewThreadEvent])(nil)
}

func TestPullRequestReview(t *testing.T) {
	checkEvent(t, probot.Github.PullRequestReview, "pull_request_review", "")
	checkEvent(t, probot.Github.PullRequestReview.Dismissed, "pull_request_review", "dismissed")
	checkEvent(t, probot.Github.PullRequestReview.Edited, "pull_request_review", "edited")
	checkEvent(t, probot.Github.PullRequestReview.Submitted, "pull_request_review", "submitted")

	h := probot.Github.PullRequestReview.Handler(func(ctx probot.PullRequestReviewContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.PullRequestReviewEvent])(nil)
}

func TestPullRequest(t *testing.T) {
	checkEvent(t, probot.Github.PullRequest, "pull_request", "")
	checkEvent(t, probot.Github.PullRequest.Assigned, "pull_request", "assigned")
	checkEvent(t, probot.Github.PullRequest.AutoMergeDisabled, "pull_request", "auto_merge_disabled")
	checkEvent(t, probot.Github.PullRequest.AutoMergeEnabled, "pull_request", "auto_merge_enabled")
	checkEvent(t, probot.Github.PullRequest.Closed, "pull_request", "closed")
	checkEvent(t, probot.Github.PullRequest.ConvertedToDraft, "pull_request", "converted_to_draft")
	checkEvent(t, probot.Github.PullRequest.Demilestoned, "pull_request", "demilestoned")
	checkEvent(t, probot.Github.PullRequest.Dequeued, "pull_request", "dequeued")
	checkEvent(t, probot.Github.PullRequest.Edited, "pull_request", "edited")
	checkEvent(t, probot.Github.PullRequest.Labeled, "pull_request", "labeled")
	checkEvent(t, probot.Github.PullRequest.Locked, "pull_request", "locked")
	checkEvent(t, probot.Github.PullRequest.Milestoned, "pull_request", "milestoned")
	checkEvent(t, probot.Github.PullRequest.Opened, "pull_request", "opened")
	checkEvent(t, probot.Github.PullRequest.ReadyForReview, "pull_request", "ready_for_review")
	checkEvent(t, probot.Github.PullRequest.Reopened, "pull_request", "reopened")
	checkEvent(t, probot.Github.PullRequest.ReviewRequestRemoved, "pull_request", "review_request_removed")
	checkEvent(t, probot.Github.PullRequest.ReviewRequested, "pull_request", "review_requested")
	checkEvent(t, probot.Github.PullRequest.Synchronize, "pull_request", "synchronize")
	checkEvent(t, probot.Github.PullRequest.Unassigned, "pull_request", "unassigned")
	checkEvent(t, probot.Github.PullRequest.Unlabeled, "pull_request", "unlabeled")
	checkEvent(t, probot.Github.PullRequest.Unlocked, "pull_request", "unlocked")

	h := probot.Github.PullRequest.Handler(func(ctx probot.PullRequestContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.PullRequestEvent])(nil)
}

func TestPush(t *testing.T) {
	checkEvent(t, probot.Github.Push, "push", "")

	h := probot.Github.Push.Handler(func(ctx probot.PushContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.PushEvent])(nil)
}

func TestStatus(t *testing.T) {
	checkEvent(t, probot.Github.Status, "status", "")

	h := probot.Github.Status.Handler(func(ctx probot.StatusContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.StatusEvent])(nil)
}

func TestWorkflowDispatch(t *testing.T) {
	checkEvent(t, probot.Github.WorkflowDispatch, "workflow_dispatch", "")

	h := probot.Github.WorkflowDispatch.Handler(func(ctx probot.WorkflowDispatchContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.WorkflowDispatchEvent])(nil)
}

func TestWorkflowJob(t *testing.T) {
	checkEvent(t, probot.Github.WorkflowJob, "workflow_job", "")
	checkEvent(t, probot.Github.WorkflowJob.Completed, "workflow_job", "completed")
	checkEvent(t, probot.Github.WorkflowJob.InProgress, "workflow_job", "in_progress")
	checkEvent(t, probot.Github.WorkflowJob.Queued, "workflow_job", "queued")
	checkEvent(t, probot.Github.WorkflowJob.Waiting, "workflow_job", "waiting")

	h := probot.Github.WorkflowJob.Handler(func(ctx probot.WorkflowJobContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.WorkflowJobEvent])(nil)
}

func TestWorkflowRun(t *testing.T) {
	checkEvent(t, probot.Github.WorkflowRun, "workflow_run", "")
	checkEvent(t, probot.Github.WorkflowRun.Completed, "workflow_run", "completed")
	checkEvent(t, probot.Github.WorkflowRun.InProgress, "workflow_run", "in_progress")
	checkEvent(t, probot.Github.WorkflowRun.Requested, "workflow_run", "requested")

	h := probot.Github.WorkflowRun.Handler(func(ctx probot.WorkflowRunContext) {
		fmt.Println(ctx)
	})
	h.(probot.EventHandlerFunc[probot.GithubClient, github.WorkflowRunEvent])(nil)
}

func checkEvent(t *testing.T, e probot.WebhookEvent, tp, action string) {
	if e.Type() != tp {
		t.Fatal("Failed to check event type", "expect", tp, "actual", e.Type())
	}
	if e.Action() != action {
		t.Fatal("Failed to check event action", "expect", action, "actual", e.Action())
	}
}
