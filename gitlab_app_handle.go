// Code generated by codegen. DO NOT EDIT.

package probot

import (
	"context"
	"fmt"
	"net/http"

	"github.com/xanzy/go-gitlab"
)

func (app *gitlabApp) handelEvent(
	ctx context.Context,
	w http.ResponseWriter, r *http.Request,
	eventType string, payload interface{},
) (handlerKey string) {
	switch typed := payload.(type) {
	case *gitlab.PushEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.PushEvent) string {
				return "Push Hook"
			},
			func(p *gitlab.PushEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.PushEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.TagEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.TagEvent) string {
				return "Tag Push Hook"
			},
			func(p *gitlab.TagEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.TagEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.IssueEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.IssueEvent) string {
				return "Issue Hook"
			},
			func(p *gitlab.IssueEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.IssueEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.CommitCommentEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.CommitCommentEvent) string {
				return "Note Hook.Commit"

			},
			func(p *gitlab.CommitCommentEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.CommitCommentEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.MergeCommentEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.MergeCommentEvent) string {
				return "Note Hook.Merge"

			},
			func(p *gitlab.MergeCommentEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.MergeCommentEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.IssueCommentEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.IssueCommentEvent) string {
				return "Note Hook.Issue"

			},
			func(p *gitlab.IssueCommentEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.IssueCommentEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.SnippetCommentEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.SnippetCommentEvent) string {
				return "Note Hook.Snippet"

			},
			func(p *gitlab.SnippetCommentEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.SnippetCommentEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.MergeEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.MergeEvent) string {
				return "Merge Request Hook"
			},
			func(p *gitlab.MergeEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.MergeEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.WikiPageEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.WikiPageEvent) string {
				return "Wiki Page Hook"
			},
			func(p *gitlab.WikiPageEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.WikiPageEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.PipelineEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.PipelineEvent) string {
				return "Pipeline Hook"
			},
			func(p *gitlab.PipelineEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.PipelineEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.JobEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.JobEvent) string {
				return "Job Hook"
			},
			func(p *gitlab.JobEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.JobEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.DeploymentEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.DeploymentEvent) string {
				return "Deployment Hook"
			},
			func(p *gitlab.DeploymentEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.DeploymentEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.MemberEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.MemberEvent) string {
				return "Member Hook"
			},
			func(p *gitlab.MemberEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.MemberEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.SubGroupEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.SubGroupEvent) string {
				return "Subgroup Hook"
			},
			func(p *gitlab.SubGroupEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.SubGroupEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.ReleaseEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.ReleaseEvent) string {
				return "Release Hook"
			},
			func(p *gitlab.ReleaseEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.ReleaseEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.PushSystemEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.PushSystemEvent) string {
				return "System Hook.Push"

			},
			func(p *gitlab.PushSystemEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.PushSystemEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.TagPushSystemEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.TagPushSystemEvent) string {
				return "System Hook.TagPush"

			},
			func(p *gitlab.TagPushSystemEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.TagPushSystemEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.RepositoryUpdateSystemEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.RepositoryUpdateSystemEvent) string {
				return "System Hook.RepositoryUpdate"

			},
			func(p *gitlab.RepositoryUpdateSystemEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.RepositoryUpdateSystemEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.ProjectSystemEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.ProjectSystemEvent) string {
				return "System Hook.Project"

			},
			func(p *gitlab.ProjectSystemEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.ProjectSystemEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.GroupSystemEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.GroupSystemEvent) string {
				return "System Hook.Group"

			},
			func(p *gitlab.GroupSystemEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.GroupSystemEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.KeySystemEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.KeySystemEvent) string {
				return "System Hook.Key"

			},
			func(p *gitlab.KeySystemEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.KeySystemEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.UserSystemEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.UserSystemEvent) string {
				return "System Hook.User"

			},
			func(p *gitlab.UserSystemEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.UserSystemEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.UserGroupSystemEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.UserGroupSystemEvent) string {
				return "System Hook.UserGroup"

			},
			func(p *gitlab.UserGroupSystemEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.UserGroupSystemEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.UserTeamSystemEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.UserTeamSystemEvent) string {
				return "System Hook.UserTeam"

			},
			func(p *gitlab.UserTeamSystemEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.UserTeamSystemEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}
	case *gitlab.BuildEvent:
		if err := genericHandleFunc(
			ctx, app.logger, string(eventType),
			func(e string, p *gitlab.BuildEvent) string {
				return "Build Hook"
			},
			func(p *gitlab.BuildEvent) error {
				*p = *typed
				return nil
			},
			func(payload *gitlab.BuildEvent) (*gitlab.Client, GitGraphQLClient, error) {
				handlerKey = getHandlerKey(string(eventType), payload)
				return app.client, nil, nil
			},
			app.handlers,
		); err != nil {
			app.handleError(w, err, http.StatusBadRequest)
			return
		}

	default:
		app.handleError(w, fmt.Errorf("event %s not found", eventType), http.StatusNotFound)
	}
	return
}
